{"data":{"allMdx":{"nodes":[{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Avatar.mdx","frontmatter":{"title":"Avatar"},"rawBody":"---\ntitle: Avatar\n---\n\n\nAvatars are images used to represent users and organizations on GitHub. They typically are squares with rounded edges.\n\n## Default example\n\n```jsx live\n<Avatar mb={4} src=\"https://avatars.githubusercontent.com/primer\" size={128} />\n\n```\nTo create a Parent + Child avatar combination, wrap Avatars in AvatarPair:\n```jsx live\n <AvatarPair my={4}>\n  <Avatar src=\"https://avatars.githubusercontent.com/primer\"/>\n  <Avatar src=\"https://avatars.githubusercontent.com/primer\"/>\n </AvatarPair>\n ```\n\n## System props\n\nAvatar components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| alt | String | | Passed through to alt on img tag |\n| isChild | Boolean | | adds the `avatar-child` class if present |\n| size | Number | 20 | adds the `avatar-small` class if less than 24 |\n| src | String | | The source url of the avatar image |\n","parent":{"relativeDirectory":"","name":"Avatar"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/AvatarStack.mdx","frontmatter":{"title":"AvatarStack"},"rawBody":"---\ntitle: AvatarStack\n---\n\nAvatarStack is used to display more than one Avatar in an inline stack.\n\nAvatarStack\n```jsx live\n <AvatarStack>\n  <img alt=\"Primer\" src=\"https://avatars.githubusercontent.com/primer\"/>\n  <img alt=\"GitHub\" src=\"https://avatars.githubusercontent.com/github\"/>\n  <img alt=\"Atom\" src=\"https://avatars.githubusercontent.com/atom\"/>\n  <img alt=\"Desktop\" src=\"https://avatars.githubusercontent.com/desktop\"/>\n </AvatarStack>\n ```\n\n## System props\n\nAvatarStack components get `COMMON` system props, AvatarStack.Item components do not get any system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n\n## AvatarStack Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| alignRight | Boolean | | Creates right aligned AvatarStack |","parent":{"relativeDirectory":"","name":"AvatarStack"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/BorderBox.md","frontmatter":{"title":"BorderBox"},"rawBody":"---\ntitle: BorderBox\n---\n\n\nBorderBox is a Box component with a border. When no `borderColor` is present, the component defaults to a gray border.\n\n## Default example\n\n```jsx live\n<BorderBox>This is a BorderBox</BorderBox>\n```\n\nNote that `BorderBox` has default props set for `borderWidth`, `borderStyle`, and `borderColor`. This means that you cannot use `border={0} borderBottom={1}` or similar patterns; instead, use individual properties like `borderWidth={0} borderBottomWidth={1}`.\n\n## System props\n\nBorderBox components get `COMMON`, `LAYOUT`, `BORDER`, and `FLEX` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Prop name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| borderWidth | String | '1px' | Sets the border, use theme values or provide your own. |\n| borderStyle | String | 'solid' | Sets the border style, use theme values or provide your own. |\n| borderColor | String | 'gray.2' (from theme) | Sets the border color, use theme values or provide your own. |\n| borderRadius | String or Number| 2 (from theme)| Sets the border radius, use theme values or provide your own. |\n| boxShadow | String | | Sets box shadow, use theme values or provide your own. |\n","parent":{"relativeDirectory":"","name":"BorderBox"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Box.md","frontmatter":{"title":"Box"},"rawBody":"---\ntitle: Box\n---\n\n\nThe Box component serves as a wrapper component for most layout related needs. Use Box to set values such as `display`,  `width`, `height`, and more. See the LAYOUT section of our [System Props](/system-props) documentation for the full list of available props. In practice, this component is used frequently as a wrapper around other components to achieve Box Model related styling.\n\n## Default example\n\n```jsx live live\n<Box>\n Box can be used to create both <Box as=\"span\" bg=\"green.1\">inline</Box> and\n <Box bg=\"blue.1\">block-level elements,</Box>\n <Box bg=\"purple.1\" width={[1, 1, 1/2]}>elements with fixed or responsive width and height,</Box>\n <Box bg=\"yellow.0\" p={4} mt={2}>and more!</Box>\n</Box>\n```\n\n## System props\n\nBox components get the `COMMON`, `LAYOUT`, and `FLEX` categories of system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Prop name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | `div` | sets the HTML tag for the component|\n","parent":{"relativeDirectory":"","name":"Box"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/BranchName.md","frontmatter":{"title":"BranchName"},"rawBody":"---\ntitle: BranchName\n---\n\n\nBranchName is a label-type component rendered as an `<a>` tag by default with monospace font and blue background.\n\n## Default example\n\n```jsx live live\n<BranchName>a_new_feature_branch</BranchName>\n```\n\n## System props\n\nBranchName components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | `<a>` | sets the HTML tag for the component |\n| href | String | | a URL to link the component to |\n","parent":{"relativeDirectory":"","name":"BranchName"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Breadcrumbs.md","frontmatter":{"title":"Breadcrumbs"},"rawBody":"---\ntitle: Breadcrumbs\n---\n\nBreadcrumbs are used to show taxonomical context on pages that are many levels deep in a site’s hierarchy. Breadcrumbs show and link to parent, grandparent, and sometimes great-grandparent pages. Breadcrumbs are most appropriate on pages that:\n\n- Are many levels deep on a site\n- Do not have a section-level navigation\n- May need the ability to quickly go back to the previous (parent) page\n\nTo use Breadcrumb with [react-router](https://github.com/ReactTraining/react-router) or\n[react-router-dom](https://www.npmjs.com/package/react-router-dom), pass\n`as={NavLink}` and omit the `selected` prop.\nThis ensures that the NavLink gets `activeClassName='selected'`\n\n## Default example\n\n```jsx live\n<Breadcrumb>\n  <Breadcrumb.Item href=\"#business\">Business</Breadcrumb.Item>\n  <Breadcrumb.Item href=\"#customers\">Customers</Breadcrumb.Item>\n  <Breadcrumb.Item href=\"#mailchimp\" selected>\n    MailChimp\n  </Breadcrumb.Item>\n</Breadcrumb>\n```\n\n## System props\n\nBreadcrumb and Breadcrumb.Item components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### Breadcrumb\n\nThe `Breadcrumb` component does not receive any additional props besides `COMMON` system props.\n\n### Breadcrumb.Item\n\n| Prop name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as        | String  | `a` | Sets the HTML tag for the component              |\n| href      | String  | | URL to be used for the Link                      |\n| selected  | Boolean | false | Used to style the link as selected or unselected |\n","parent":{"relativeDirectory":"","name":"Breadcrumbs"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Buttons.md","frontmatter":{"title":"Buttons"},"rawBody":"---\ntitle: Buttons\n---\n\n\n`Button` is used for actions, like in forms, while `Link` is used for destinations, or moving from one page to another.\n\nIn special cases where you'd like to use a `<a>` styled like a Button, use `<Button as='a'>` and provide an `href`.\n\nTo create a button group, wrap `Button` elements in the `ButtonGroup` element. `ButtonGroup` gets the same props as `Box`.\n\n## Default examples\n\n```jsx live\n<Button>Button</Button>\n<ButtonDanger>Button Danger</ButtonDanger>\n<ButtonOutline>Button Outline</ButtonOutline>\n<ButtonPrimary>Button Primary</ButtonPrimary>\n\n<ButtonGroup display='block' my={2}>\n  <Button>Button</Button>\n  <Button>Button</Button>\n  <Button>Button</Button>\n</ButtonGroup>\n\n<ButtonTableList>Button Table List </ButtonTableList>\n```\n\n## System props\n\n`Button` and `ButtonGroup` components get `COMMON` and `LAYOUT` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nNative `<button>` HTML attributes are forwarded to the underlying React `button` component and are not listed below.\n\n### Button\n| Prop name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | `button` | sets the HTML tag for the component |\n| fontSize | Number or String | | explicitly sets the font size for the Button text; overrides any value for the `variant` prop |\n| variant | String | 'medium' | a value of `small`, `medium`, or `large` results in smaller or larger Button text size; no effect if `fontSize` prop is set |\n\n### ButtonGroup\n`ButtonGroup` has access to the same props as `Box`\n","parent":{"relativeDirectory":"","name":"Buttons"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/CircleBadge.md","frontmatter":{"title":"CircleBadge"},"rawBody":"---\ntitle: CircleBadge\n---\n\n\nUse CircleBadge to visually connect logos of third party services like in marketplace. Use CircleBadge.Icon to add an Octicon to the CircleBadge.\n\n## Default example\n\n```jsx live\n<CircleBadge>\n  <CircleBadge.Icon icon={Zap} />\n</CircleBadge>\n```\n\n## System props\n\nCircleBadge and CircleBadge.Icon components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### CircleBadge\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | `div` | sets the HTML tag for the component |\n| inline | Boolean | false | Styles the badge to display inline |\n| size | Number | | sets the size of the badge in pixels; overrides any value for `variant` prop when set |\n| variant | String | 'medium' | a value of `small`, `medium`, or `large` creates a smaller or larger badge; no effect if `size` prop is set |\n\n### CircleBadge.Icon\nCircleBadge.Icon components do not receive any additional props besides `COMMON` system props.\n","parent":{"relativeDirectory":"","name":"CircleBadge"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/CircleOcticon.md","frontmatter":{"title":"CircleOcticon"},"rawBody":"---\ntitle: CircleOcticon\n---\n\n\nCircleOcticon renders any Octicon with a circle background. CircleOcticons are most commonly used to represent the status of a pull request in the comment timeline.\n\n## Default example\n\n```jsx live\n  <CircleOcticon icon={Check} size={32} bg=\"green.5\" color=\"white\"/>\n```\n\n## System props\n\nCircleOcticon components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| icon | Octicon | | Octicon component used in the component |\n| size | Number | 32 | used to set the width and height of the component |\n","parent":{"relativeDirectory":"","name":"CircleOcticon"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/CounterLabel.md","frontmatter":{"title":"CounterLabel"},"rawBody":"---\ntitle: CounterLabel\ntags: pill\n---\n\nUse the CounterLabel component to add a count to navigational elements and buttons.\n\n## Default example\n```jsx live\n<CounterLabel>12</CounterLabel>\n<CounterLabel scheme={'gray'}>13</CounterLabel>\n<CounterLabel scheme={'gray-light'}>13</CounterLabel>\n```\n\n## System props\n\nCounterLabel components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| scheme | String | | Pass in 'gray' for a darker gray background and white text, or 'gray-light' for a lighter gray background and dark text. Omitting the scheme prop renders the default counter scheme |\n","parent":{"relativeDirectory":"","name":"CounterLabel"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Details.md","frontmatter":{"title":"Details"},"rawBody":"---\ntitle: Details\n---\n\nThe Details component is an HTML `<details>` element without native browser styling that optionally uses the [render props pattern](https://reactjs.org/docs/render-props.html) to pass its state to child components.\n\nYou are responsible for rendering your own `<summary>`. To style your summary element like a [Button](./Button), you can use the `as` prop:\n\n```jsx\n<Button as=\"summary\">Summary text</Button>\n```\n\n## With static children\n```jsx live\n<Details>\n  <Button as=\"summary\">Click me</Button>\n  <p>This should show and hide</p>\n</Details>\n\n```\n\n## With children as a function\nThe render function gets an object with the `open` render prop to allow you to conditionally update UI based on the open state of the dropdown:\n\n```jsx live\n<Details>\n  {({open}) => (\n    <>\n      <Button as=\"summary\">\n        {open ? 'Hide' : 'Show'}\n      </Button>\n      <p>This should show and hide</p>\n    </>\n  )}\n</Details>\n```\n\n## Manage the open state manually\nThe `Details` element is built to also let you manage the open state and toggle functionality if necessary. Just provide values to the `open` and `onToggle` props.\n\n**Note:** The `overlay` prop will not function automatically if you chose to provide your own `open` state. You'll need to implement this yourself. You can use the `onClickOutside` prop to implement and customize this behavior.\n\n```jsx live\n<State default={false}>\n  {([open, setOpen]) => {\n    const handleToggle = (e) => setOpen(e.target.open)\n    const handleClickOutside = () => setOpen(false)\n\n    return (\n      <Details open={open} onToggle={handleToggle} onClickOutside={handleClickOutside} overlay>\n        <Button as=\"summary\">Click me</Button>\n        <p>This should show and hide</p>\n      </Details>\n    )\n  }}\n</State>\n```\n\n## System props\n\nDetails components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| defaultOpen | Boolean | | Sets the initial open/closed state |\n| overlay | Boolean | false | Sets whether or not element will close when user clicks outside of it |\n| open | Boolean | | Use the open prop if you'd like to manage the open state |\n| onToggle | Function | | Called whenever user clicks on `summary` element. If you are controlling your own `open` state this will be the only function called on click, otherwise it's called before the internal `handleToggle` function.|\n| onClickOutside | Function | | Function to call whenever user clicks outside of the Details component. This is optional and only necessary if you are controlling your own `open` state. |\n","parent":{"relativeDirectory":"","name":"Details"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Dialog.md","frontmatter":{"title":"Dialog"},"rawBody":"---\ntitle: Dialog\n---\nimport State from '../components/State'\nimport {Button, Dialog, Box, Text} from '@primer/components'\n\nThe dialog component is used for all modals. It renders on top of the rest of the app with an overlay.\n\n**Note:** You'll need to manage the `isOpen` state in a wrapper component of your own. For documentation purposes only we've created a mock `State` to handle this, but you should handle the state in the component you consume `Dialog` in or in a wrapper component.\n\n```jsx live\n<State default={false}>\n  {([isOpen, setIsOpen]) => (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Open</Button>\n      <Dialog isOpen={isOpen} onDismiss={() => setIsOpen(false)}>\n        <Dialog.Header>Title</Dialog.Header>\n        <Box p={3}>\n          <Text fontFamily=\"sans-serif\">Some content</Text>\n        </Box>\n      </Dialog>\n    </>\n  )}\n</State>\n```\n\nYou can also pass any non-text content into the header:\n\n```jsx live\n<State default={false}>\n  {([isOpen, setIsOpen]) => (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Open</Button>\n      <Dialog isOpen={isOpen} onDismiss={() => setIsOpen(false)}>\n        <Dialog.Header>\n          <Octicon icon={Zap} />\n        </Dialog.Header>\n        <Box p={3}>\n          <Text fontFamily=\"sans-serif\">Some content</Text>\n        </Box>\n      </Dialog>\n    </>\n  )}\n</State>\n```\n\n## System props\n\n`Dialog` components get the `COMMON` and `LAYOUT` categories of system props. `Dialog.Header` components get `COMMON`, `LAYOUT`, and `FLEX` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Prop name | Type | Description |\n| :- | :- | :- |\n| isOpen | Boolean | Set whether or not the dialog is shown |\n| onDismiss | Function | A user-provided function that should close the dialog |\n\n`Dialog.Header` does not take any non-system props.\n","parent":{"relativeDirectory":"","name":"Dialog"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Dropdown.md","frontmatter":{"title":"Dropdown"},"rawBody":"---\ntitle: Dropdown\n---\nThe Dropdown component is a lightweight context menu for housing navigation and actions.\n\nUse `Dropdown.Button` as the trigger for the dropdown, or use a custom `summary` element if you would like. **You must use a `summary` tag in order for the dropdown to behave properly!**. You should also add `aria-haspopup=\"true\"` to custom dropdown triggers for accessibility purposes. You can use the `Dropdown.Caret` component to add a caret to a custom dropdown trigger.\n\nDropdown.Menu wraps your menu content. Be sure to pass a `direction` prop to this component to position the menu in relation to the Dropdown.Button.\n\n## Default example\n```jsx live\n<Dropdown direction='w'>\n  <Dropdown.Button>Dropdown</Dropdown.Button>\n  <Dropdown.Menu direction='sw'>\n    <Dropdown.Item>Item 1</Dropdown.Item>\n    <Dropdown.Item>Item 2</Dropdown.Item>\n    <Dropdown.Item>Item 3</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n```\n\n## With custom button\n```jsx live\n<Dropdown>\n  <summary>\n    Dropdown\n    <Dropdown.Caret/>\n  </summary>\n  <Dropdown.Menu direction='sw'>\n    <Dropdown.Item>Item 1</Dropdown.Item>\n    <Dropdown.Item>Item 2</Dropdown.Item>\n    <Dropdown.Item>Item 3</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n```\n\n## Manage the open state manually\nThe `Dropdown` element is built to also let you manage the open state and toggle functionality if necessary. Just provide values to the `open` and `onToggle` props.\n\n**Note:** Closing the dropdown on outside clicks will not function automatically if you chose to provide your own `open` state. You'll need to implement this yourself. You can use the `onClickOutside` prop to implement and customize this behavior.\n\n```jsx live\n<State default={false}>\n  {([open, setOpen]) => {\n    \n    const handleToggle = (e) => setOpen(e.target.open)\n    const handleClickOutside = () => setOpen(false)\n\n    return (\n      <Dropdown open={open} onToggle={handleToggle} onClickOutside={handleClickOutside}>\n        <Dropdown.Button>Dropdown</Dropdown.Button>\n        <Dropdown.Menu direction='sw'>\n          <Dropdown.Item>Item 1</Dropdown.Item>\n          <Dropdown.Item>Item 2</Dropdown.Item>\n          <Dropdown.Item>Item 3</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    )\n  }}\n</State>\n```\n\n## System props\n\nDropdown, Dropdown.Menu, Dropdown.Button, Dropdown.Caret, and Dropdown.Item all get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nThe Dropdown component is extended from the [`Details`](/Details) component and gets all props that the [`Details`](/Details) component gets. They are listed below, but you may reference the [`Details`](/Details) docs for more details on how to manage your own `open` state.\n\n#### Dropdown\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| defaultOpen | Boolean | | Sets the initial open/closed state |\n| overlay | Boolean | false | Sets whether or not element will close when user clicks outside of it |\n| open | Boolean | | Use the open prop if you'd like to manage the open state |\n| onToggle | Function | | Called whenever user clicks on `summary` element. If you are controlling your own `open` state this will be the only function called on click, otherwise it's called before the internal `handleToggle` function.|\n| onClickOutside | Function | | Function to call whenever user clicks outside of the Details component. This is optional and only necessary if you are controlling your own `open` state. |\n\n\n\n#### Dropdown.Menu\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| direction | String | 'sw' | Sets the direction of the dropdown menu. Pick from 'ne', 'e', 'se', 's', 'sw', or 'w' |\n\n#### Dropdown.Button\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| onClick | Function | none | Use the `onClick` handler to add additional functionality when the button is clicked, such as fetching data. |\n\n#### Dropdown.Caret\nNo additional props.\n\n#### Dropdown.Item\nNo additional props.\n","parent":{"relativeDirectory":"","name":"Dropdown"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/FilterList.md","frontmatter":{"title":"FilterList"},"rawBody":"---\ntitle: FilterList\n---\n\nThe FilterList component is a menu with filter options that filter the main content of the page.\n\n## Default example\n\n```jsx live\n<FilterList>\n  <FilterList.Item selected count='32' href='#foo'>First Filter</FilterList.Item>\n  <FilterList.Item count='2' href='#bar'>Second Filter</FilterList.Item>\n  <FilterList.Item href='#baz'>Third Filter</FilterList.Item>\n</FilterList>\n```\n\n## System props\n\nFilterList components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n#### FilterList\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| small | Boolean | false | Used to create a smaller version of the standard FilterList|\n\n#### FilterList.Item\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| count | Number |  | Number to be displayed in the list item |\n| as | String |`a`| sets the HTML tag for the component |\n| selected | Boolean | | Used to set selected style |\n","parent":{"relativeDirectory":"","name":"FilterList"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/FilteredSearch.md","frontmatter":{"title":"FilteredSearch"},"rawBody":"---\ntitle: FilteredSearch\n---\n\nThe FilteredSearch component helps style a Dropdown and a TextInput side-by-side.\n\n**Note:** You *must* use a `TextInput` and `Dropdown` (or native `<details>` and `<summary>`) in order for this component to work properly.\n## Default example\n\n```jsx live\n<FilteredSearch>\n  <Dropdown>\n    <Dropdown.Button>Filter</Dropdown.Button>\n    <Dropdown.Menu direction=\"sw\">\n      <Dropdown.Item>Item 1</Dropdown.Item>\n      <Dropdown.Item>Item 2</Dropdown.Item>\n      <Dropdown.Item>Item 3</Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n  <TextInput icon={Search} />\n</FilteredSearch>\n```\n\n## System props\n\nFilteredSearch gets `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n#### FilteredSearch.Children\n\nFilteredSearch is expected to contain a [`Dropdown`](/Dropdown) followed by a [`TextInput`](/TextInput).\n","parent":{"relativeDirectory":"","name":"FilteredSearch"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Flash.md","frontmatter":{"title":"Flash"},"rawBody":"---\ntitle: Flash\n---\n\nThe Flash component informs users of successful or pending actions.\n\n## Default example\n\n```jsx live\n<Flash>Default Flash</Flash>\n<Flash variant=\"success\">Success Flash</Flash>\n<Flash variant=\"warning\">Warning Flash</Flash>\n<Flash variant=\"danger\">Danger Flash</Flash>\n```\n\n## With an icon\n\nFlash components with icons inside of them will automatically set the correct color for the icon depending on the type of Flash, as well as applying the correct right margin.\n\n```jsx live\n<Flash variant=\"success\">\n  <StyledOcticon icon={Check}/>\n  Success!\n</Flash>\n```\n\n## System props\n\nFlash components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| full | Boolean | | Creates a full width Flash component|\n| variant | String | default | Can be one of `default`, `success`, `warning`, or `danger` - sets the background color and border of the Flash component |\n","parent":{"relativeDirectory":"","name":"Flash"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Flex.md","frontmatter":{"title":"Flex"},"rawBody":"---\ntitle: Flex\n---\n\nThe `Flex` component behaves the same as the `Box` component except that it has `display: flex` set by default.\n\n*Previously, a `Flex.Item` component was used for flex item specific properties; `Box` now contains all those properties and should be used in its place.*\n\n## Default example\n\n```jsx live\n<BorderBox width={300} height={300} borderRadius={0}>\n  <Flex flexWrap=\"nowrap\">\n    <Box p={3} bg=\"blue.5\">\n      Item 1\n    </Box>\n    <Box p={3} bg=\"green.5\">\n      Item 2\n    </Box>\n    <Box p={3} bg=\"yellow.5\">\n      Item 3\n    </Box>\n  </Flex>\n</BorderBox>\n```\n\n## System props\n\nFlex components get `FLEX`, `COMMON`, and `LAYOUT` system props.\n\nRead our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n`Flex` does not get any additional props other than the system props mentioned above.\n","parent":{"relativeDirectory":"","name":"Flex"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Grid.md","frontmatter":{"title":"Grid"},"rawBody":"---\ntitle: Grid\n---\n\nGrid is a component that exposes grid system props. See the [CSS Tricks Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/) to learn more about Grid Layout.\n\n## Default example\n\n```jsx live\n<Grid gridTemplateColumns=\"repeat(2, auto)\" gridGap={3}>\n    <Box p={3} bg=\"blue.2\">1</Box>\n    <Box p={3} bg=\"yellow.2\">2</Box>\n</Grid>\n```\n\n## System props\n\nGrid components get `GRID`, `COMMON`, and `LAYOUT` system props.\n\nRead our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n`Grid` does not get any additional props other than the system props mentioned above.\n","parent":{"relativeDirectory":"","name":"Grid"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Heading.md","frontmatter":{"title":"Heading"},"rawBody":"---\ntitle: Heading\n---\n\nThe Heading component will render an html `h2` tag without any default styling. Other heading level elements `h1-h6` are available through use of the `as` prop (see [System Props](/system-props) for additional explanation). Please reference the [w3 recommendations for headings](https://www.w3.org/WAI/tutorials/page-structure/headings/) to ensure your headings provide an accessible experience for screen reader users.\n\n**Attention:** Make sure to include a valid heading element to render a Heading component other than `h2` (`<Heading as=\"h1\">H1 Element</Heading>`).\n\n## Default example\n```jsx live\n<Heading fontSize={1} mb={2}>H2 heading with fontSize={1}</Heading>\n```\n\n## System props\n\nHeading components get `TYPOGRAPHY` and `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Prop name | Type    | Description                                      |\n| :-------- | :------ | :----------------------------------------------- |\n| as        | String or React element  | sets the HTML tag for the component              |\n","parent":{"relativeDirectory":"","name":"Heading"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Label.md","frontmatter":{"title":"Label"},"rawBody":"---\ntitle: Label\n---\n\nThe Label component is used to add contextual metadata to a design. Visually it styles text, adds padding, and rounded corners.\n\n## Default example\n\n```jsx live\n  <Label variant=\"small\" outline borderColor=\"red.2\" mr={2} color=\"red.4\">small</Label>\n  <Label variant=\"medium\" mr={2}>medium (default)</Label>\n  <Label variant=\"large\" mr={2}>large</Label>\n  <Label variant=\"xl\">xl label</Label>\n  \n  <Box mt={4}/>\n  <Label variant=\"medium\" bg=\"#A575FF\" m={1}>good first issue</Label>\n  <Label variant=\"medium\" bg=\"#FF75C8\" m={1}>🚂 deploy: train</Label>\n  <Label variant=\"medium\" bg=\"#1C90FA\" m={1}>css</Label>\n  <Label variant=\"medium\" bg=\" #FFF06C\" color=\"#24292E\" m={1}>documentation</Label>\n  <Label variant=\"medium\" bg=\"#656BFE\" m={1}>primer</Label>\n```\n\n## System props\n\nLabel components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| outline | Boolean | | Creates an outline style label |\n| variant | String | 'medium' | Can be one of `small`, `medium` (default), `large` or `xl` .\n| dropshadow | Boolean | | Adds a dropshadow to the label |\n| bg | String | 'gray.5' | Part of the `COMMON` system props, used to change the background of the label.\n","parent":{"relativeDirectory":"","name":"Label"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/LabelGroup.md","frontmatter":{"title":"LabelGroup"},"rawBody":"---\ntitle: LabelGroup\n---\n\nThe LabelGroup component is used to add commonly used margins and wrapping for groups of Labels.\n\n## Default example\n\n```jsx live\n<LabelGroup>\n  <Label>Default label</Label>\n  <Label bg='red.4'>Label with red background</Label>\n  <Label outline>Default outline label</Label>\n</LabelGroup>\n```\n\n## System props\n\nLabelGroup components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nLabelGroup does not get any additional props other than the `COMMON` system props.\n","parent":{"relativeDirectory":"","name":"LabelGroup"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Link.md","frontmatter":{"title":"Link"},"rawBody":"---\ntitle: Link\n---\n\nThe Link component styles anchor tags with default blue styling and hover text decoration. `Link` is used for destinations, or moving from one page to another.\n\nIn special cases where you'd like a `<button>` styled like a `Link`, use `<Link as='button'>`. Make sure to provide a click handler with `onClick`.\n\n**Important:** When using the `as` prop, be sure to always render an accessible element type, like `a`, `button`, `input`, or `summary`.\n\n## Default example\n\n```jsx live\n<Link mb={1} href=\"https://github.com\">\n  Link\n</Link>\n```\n\n## System props\n\nLink components get `COMMON` and `TYPOGRAPHY` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name      | Type    | Default | Description                                       |\n| :-------- | :------ | :-----: | :------------------------------------------------ |\n| href      | String  |         | URL to be used for the Link                       |\n| muted     | Boolean |  false  | Uses light gray for Link color, and blue on hover |\n| underline | Boolean |  false  | Adds underline to the Link                        |\n| as        | String  |   'a'   | Can be 'a', 'button', 'input', or 'summary'       |\n","parent":{"relativeDirectory":"","name":"Link"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Pagination.md","frontmatter":{"title":"Pagination"},"rawBody":"---\ntitle: Pagination\n---\nimport State from '../components/State'\n\nUse the pagination component to create a connected set of links that lead to related pages (for example, previous, next, or page numbers).\n\n## Basic example\n\nThe pagination component only requires two properties to render: `pageCount`, which is the total number of pages, and `currentPage`, which is the currently selected page number (which should be managed by the consuming application).\n\n```jsx live\n<Pagination\n  pageCount={15}\n  currentPage={2}\n  onPageChange={e => e.preventDefault()}\n/>\n```\n\nHowever, to handle state changes when the user clicks a page, you also need to pass `onPageChange`, which is a function that takes a click event and page number as an argument:\n\n```javascript\ntype PageChangeCallback = (evt: React.MouseEvent, page: number) => void\n```\n\nBy default, clicking a link in the pagination component will cause the browser to navigate to the URL specified by the page. To cancel navigation and handle state management on your own, you should call `preventDefault` on the event, as in this example:\n\n```jsx live\n<State default={1}>\n  {([page, setPage]) => {\n    const totalPages = 15\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setPage(page)\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>Current page: {page} / {totalPages}</Box>\n        <Pagination\n          pageCount={totalPages}\n          currentPage={page}\n          onPageChange={onPageChange}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n```\n\n## Customizing link URLs\n\nTo customize the URL generated for each link, you can pass a function to the `hrefBuilder` property. The function should take a page number as an argument and return a URL to use for the link.\n\n```javascript\ntype HrefBuilder = (page: number) => string\n```\n\n```jsx live\n<State default={'(nothing clicked yet)'}>\n  {([lastUrl, setLastUrl]) => {\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setLastUrl(evt.target.href)\n    }\n    const hrefBuilder = (page) => {\n      return `https://example.com/pages/${page}`\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>The last URL clicked was: {lastUrl}</Box>\n        <Pagination\n          pageCount={15}\n          currentPage={2}\n          onPageChange={onPageChange}\n          hrefBuilder={hrefBuilder}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n```\n\n## Customizing which pages are shown\n\nTwo props control how many links are displayed in the pagination container at any given time. `marginPageCount` controls how many pages are guaranteed to be displayed on the left and right of the component; `surroundingPageCount` controls how many pages will be displayed to the left and right of the current page.\n\n```jsx live\n<Pagination\n  pageCount={20}\n  currentPage={10}\n  marginPageCount={1}\n  surroundingPageCount={2}\n  onPageChange={e => e.preventDefault()}\n/>\n```\n\nThe algorithm tries to minimize the amount the component shrinks and grows as the user changes pages; for this reason, if any of the pages in the margin (controlled via `marginPageCount`) intersect with pages in the center (controlled by `surroundingPageCount`), the center section will be shifted away from the margin. Consider the following examples, where pages one through six are shown when any of the first four pages are selected. Only when the fifth page is selected and there is a gap between the margin pages and the center pages does a break element appear.\n\n```jsx live\n<Box>\n  {[1, 2, 3, 4, 5].map(page => (\n    <Pagination\n      pageCount={20}\n      currentPage={page}\n      marginPageCount={1}\n      surroundingPageCount={2}\n      onPageChange={e => e.preventDefault()}\n    />\n  ))}\n</Box>\n```\n\n### Previous/next pagination\n\nTo hide all the page numbers and create a simple pagination container with just the Previous and Next buttons, set `showPages` to `false`.\n\n```jsx live\n<State default={1}>\n  {([page, setPage]) => {\n    const totalPages = 10\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setPage(page)\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>Current page: {page} / {totalPages}</Box>\n        <Pagination\n          pageCount={totalPages}\n          currentPage={page}\n          onPageChange={onPageChange}\n          showPages={false}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n```\n\n## System props\n\nPagination components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| currentPage | Number | | **Required.** The currently selected page. |\n| hrefBuilder | Function | `#${page}` | A function to generate links based on page number. |\n| marginPageCount | Number | 1 | How many pages to always show at the left and right of the component. |\n| onPageChange | Function | no-op | Called with event and page number when a page is clicked. |\n| pageCount | Number | | **Required.** The total number of pages. |\n| showPages | Boolean | `true` | Whether or not to show the individual page links. |\n| surroundingPageCount | Number | 2 | How many pages to display on each side of the currently selected page. |\n\n## Theming\n\nThe following snippet shows the properties in the theme that control the styling of the pagination component:\n\n```javascript\n{\n  // ... rest of theme ...\n  pagination: {\n    fontSize,\n    fontWeight,\n    borderRadius,\n    colors: {\n      normal: {\n        fg,\n        bg,\n        border\n      },\n      disabled: {\n        fg,\n        bg,\n        border\n      },\n      hover: {\n        fg,\n        bg,\n        border\n      },\n      selected: {\n        fg,\n        bg,\n        border\n      }\n    }\n  }\n}\n```\n","parent":{"relativeDirectory":"","name":"Pagination"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/PointerBox.md","frontmatter":{"title":"PointerBox"},"rawBody":"---\ntitle: PointerBox\n---\n\nPointerBox is a [BorderBox](./BorderBox) component with a caret added to it.\n\n## Default example\n\n```jsx live\n<PointerBox m={4} p={2} minHeight={100} bg=\"green.1\" borderColor=\"green.5\">\n  PointerBox\n</PointerBox>\n```\n\n## System props\n\nPointerBox components get `COMMON`, `LAYOUT`, `BORDER`, and `FLEX` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| caret | String | bottom | Sets the location of the caret. The format is `[edge]-[position on edge]`. For example, `right-top` will position the caret on the top of the right edge of the box. Use `top`, `right`, `bottom`, or `left` to position a caret in the center of that edge. |\n","parent":{"relativeDirectory":"","name":"PointerBox"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Popover.md","frontmatter":{"title":"Popover"},"rawBody":"---\ntitle: Popover\n---\n\nPopovers are used to bring attention to specific user interface elements, typically to suggest an action or to guide users through a new experience.\n\nTwo components make up a popover; the `Popover` component controls the absolute positioning of the popover, and `Popover.Content` renders the inner content of the popover as well as the caret.\n\nBy default, the popover renders with absolute positioning, meaning it should usually be wrapped in an element with a relative position in order to be positioned properly. To render the popover with relative positioning, use the `relative` property.\n\nIt can be useful to give the `Popover.Content` element a margin to help align the popover.\n\n## Default Example\n\n```jxs live\n<Relative>\n  <Text textAlign=\"center\" display=\"block\">\n    <ButtonPrimary>Hello!</ButtonPrimary>\n  </Text>\n\n  <Popover relative open={true} caret=\"top\">\n    <Popover.Content mt={2}>\n      <Heading fontSize={2}>Popover heading</Heading>\n      <Text as=\"p\">Message about this particular piece of UI.</Text>\n      <Button>Got it!</Button>\n    </Popover.Content>\n  </Popover>\n</Relative>\n```\n\n## Caret position\n\n`Popover` supports various caret positions, which you can specify via the `caret` property. This demo shows all the valid values for the prop. The default is `top`. Note that the `top-left`, `bottom-left`, `top-right`, and `bottom-right` values modify the horizontal alignment of the popover.\n\n```javascript live noinline\nfunction PopoverDemo(props) {\n  const [pos, setPos] = React.useState('top')\n  const [open, setOpen] = React.useState(true)\n\n  return (\n    <Box>\n      <Heading as=\"h3\" fontSize={3}>Caret Position</Heading>\n      <CaretSelector current={pos} onChange={setPos} />\n      <Heading as=\"h3\" fontSize={3}>Popover Visibility</Heading>\n      <Box my={2}>\n        <label>\n          <input type=\"checkbox\" value={open} checked={open}\n            onChange={() => setOpen(open => !open)}/> Open\n        </label>\n      </Box>\n\n      <Relative pt={4}>\n        <Popover relative open={open} caret={pos}>\n          <Popover.Content>\n            <Heading fontSize={2}><code>{pos}</code> caret</Heading>\n            <Text as=\"p\">Message about this particular piece of UI.</Text>\n            <Button onClick={() => setOpen(false)}>Got it!</Button>\n          </Popover.Content>\n        </Popover>\n      </Relative>\n    </Box>\n  )\n}\n\nfunction CaretSelector(props) {\n  const choices = [\n    'top',         'bottom',      'left',         'right',\n    'left-bottom', 'left-top',    'right-bottom', 'right-top',\n    'top-left',    'bottom-left', 'top-right',    'bottom-right'\n  ].map((dir) => (\n    <label>\n      <input key={dir} type='radio' name='caret' value={dir}\n        checked={dir === props.current} onChange={() => props.onChange(dir)} /> {dir}\n    </label>\n))\n\n  return (\n    <Grid gridTemplateColumns=\"repeat(4, auto)\" gridGap={3} my={2}>\n      {choices}\n    </Grid>\n  )\n}\n\nrender(<PopoverDemo />)\n```\n\n## System props\n\n`Popover` components get `COMMON`, `LAYOUT`, and `POSITION` system props. `Popover.Content` components get `COMMON`, `LAYOUT`, `BORDER`, and `FLEX` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### Popover\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | 'div' | Sets the HTML tag for the component. |\n| caret | String | 'top' | Controls the position of the caret. See below for the list of caret positions. |\n| open | Boolean | false | Controls the visibility of the popover. |\n| relative | Boolean | false | Set to true to render the popover using relative positioning. |\n\n#### Caret Positions\n\nThe `caret` prop can be one of the following values: `top`, `bottom`, `left`, `right`, `bottom-left`, `bottom-right`, `top-left`, `top-right`, `left-bottom`, `left-top`, `right-bottom`, or `right-top`.\n\n### Popover.Content\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | 'div' | Sets the HTML tag for the component. |\n","parent":{"relativeDirectory":"","name":"Popover"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Position.md","frontmatter":{"title":"Position Components"},"rawBody":"---\ntitle: Position Components\n---\n\nThe Position component is a wrapper component that gives the containing component css positioning abilities.\n\n## Default examples\n\n```jsx live\n<Box p={2} mb={200}>\n  <Heading mb={2}>Relative + Absolute</Heading>\n  <Relative size={128} mx={128} my={6}>\n    <Box border={1} borderColor=\"gray.2\" size=\"100%\">\n      <Absolute left=\"100%\" top={0} bg=\"red.1\" p={1}>rt</Absolute>\n      <Absolute right=\"100%\" top={0} bg=\"green.1\" p={1}>lt</Absolute>\n      <Absolute left=\"100%\" bottom={0} bg=\"blue.1\" p={1}>rb</Absolute>\n      <Absolute right=\"100%\" bottom={0} bg=\"purple.1\" p={1}>lb</Absolute>\n      <Absolute left={0} top=\"100%\" bg=\"orange.1\" p={1}>bl</Absolute>\n      <Absolute right={0} top=\"100%\" bg=\"yellow.3\" p={1}>br</Absolute>\n      <Absolute left={0} bottom=\"100%\" bg=\"red.1\" p={1}>tl</Absolute>\n      <Absolute right={0} bottom=\"100%\" bg=\"blue.1\" p={1}>tr</Absolute>\n    </Box>\n  </Relative>\n\n  <Heading my={2}>Sticky</Heading>\n\n  <BorderBox border={1} borderColor=\"green.5\" height={500}>\n    <Sticky top={0} bg=\"green.2\" p={6}>\n      I'm sticky!\n    </Sticky>\n  </BorderBox>\n\n  <Heading my={2}>Fixed</Heading>\n  <p>(see the bottom right of the screen)</p>\n\n  <Fixed bottom={0} right={0} bg=\"red.2\" p={2}>\n    I'm fixed to the bottom right.\n  </Fixed>\n</Box>\n```\n\n## System props\n\nPosition components get `POSITION`, `LAYOUT`, `FLEX, and `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nPosition does not get any additional props other than the system props mentioned above.\n","parent":{"relativeDirectory":"","name":"Position"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/ProgressBar.mdx","frontmatter":{"title":"ProgressBar"},"rawBody":"---\ntitle: ProgressBar\n---\n\n\nUse `ProgressBar` to visualize task completion. \n\n## Default example\n\n```jsx live\n<ProgressBar progress={80}/>\n ```\n\n If you'd like to use ProgressBar inline, pass the `inline` boolean prop & **be sure to set a width**.\n ```jsx live\n  <>\n    <Text mr={3}>5 of 10</Text>\n    <ProgressBar progress={50} inline width='100px'/>\n  </>\n ```\n\n## System props\n\nProgressBar components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| progress | Number | | Used to set the size of the green bar |\n| barSize | String | 'default' | Controls the height of the progress bar. Can be 'small', 'large', or 'default'. If omitted, height is set to the default height. |\n| inline | Boolean | false | Styles the progress bar inline |\n| bg | String | 'green.5' | Set the progress bar color, defaults to bg-green |\n","parent":{"relativeDirectory":"","name":"ProgressBar"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/SideNav.md","frontmatter":{"title":"SideNav"},"rawBody":"---\ntitle: SideNav\n---\n\nThe Side Nav is a vertical list of navigational links, typically used on the left side of a page. For maximum flexibility, **SideNav elements have no default width or positioning.**\n\n## Default example\n\n```jsx live\n<SideNav bordered maxWidth={360} aria-label=\"Main\">\n  <SideNav.Link href=\"#account\">\n    <Text>Account</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#home\" selected>\n    <Text>Profile</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#emails\">\n    <Text>Emails</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#notifications\">\n    <Text>Notifications</Text>\n  </SideNav.Link>\n</SideNav>\n```\n\nDifferent kinds of content can be added inside a SideNav item. Use system props to further style them if needed.\n\n## Full variant\n\nAdd the `variant='full'` prop to a `SideNav.Link` to spread child elements across the link, which is useful for status icons, labels, and the like.\n\n```jsx live\n<SideNav bordered maxWidth={360} aria-label=\"Main\">\n  <SideNav.Link href=\"#url\">\n    <Text>Text Only</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\">\n    <Avatar\n      size={16}\n      mr={2}\n      src=\"https://avatars.githubusercontent.com/hubot?s=32\"\n    />\n    <Text>With an avatar</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\">\n    <StyledOcticon mr={2} size={16} icon={Zap} />\n    <Text>With an Octicon</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\" variant=\"full\" selected>\n    <Text>With a status icon</Text>\n    <StyledOcticon mr={2} size={16} icon={PrimitiveDot} color=\"green.5\" />\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\" variant=\"full\">\n    <Text>With a label</Text>\n    <Label bg='blue.5'>label</Label>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\" variant=\"full\">\n    <Text>With a counter</Text>\n    <CounterLabel>16</CounterLabel>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\">\n    <Heading as=\"h5\" fontSize={1}>A heading</Heading>\n    <Text>and some more content</Text>\n  </SideNav.Link>\n</SideNav>\n```\n\n## Lightweight variant\n\nAdd the `variant=\"lightweight\"` prop to `SideNav` to render an alternative, more lightweight version that has items with no borders and are more condensed.\n\n```jsx live\n<BorderBox p={3} backgroundColor='gray.0' maxWidth={360}>\n  <BorderBox borderWidth={0} borderBottomWidth={1} borderRadius={0} mb={2} pb={1}>\n    <Heading as=\"h5\" fontSize={1} color=\"gray.7\">Menu</Heading>\n  </BorderBox>\n  <SideNav variant=\"lightweight\">\n    <SideNav.Link href=\"#url\">\n      <Text>Account</Text>\n    </SideNav.Link>\n    <SideNav.Link href=\"#url\" selected>\n      <Text>Profile</Text>\n    </SideNav.Link>\n    <SideNav.Link href=\"#url\">\n      <Text>Emails</Text>\n    </SideNav.Link>\n    <SideNav.Link href=\"#url\">\n      <Text>Notifications</Text>\n    </SideNav.Link>\n  </SideNav>\n</BorderBox>\n```\n\nIt can also appear nested, as a sub navigation. Use margin/padding [System Props](/system-props) to add indentation.\n\n```jsx live\n<SideNav bordered maxWidth={360}>\n  <SideNav.Link href=\"#url\">\n    <StyledOcticon mr={2} size={16} icon={Person} />\n    <Text>Account</Text>\n  </SideNav.Link>\n  <SideNav.Link href=\"#url\" selected>\n    <StyledOcticon mr={2} size={16} icon={Octoface} />\n    <Text>Profile</Text>\n  </SideNav.Link>\n\n  <SideNav bordered variant=\"lightweight\" py={3} pl={6} backgroundColor=\"white\">\n    <SideNav.Link href=\"#url\" selected>\n      <Text>Sub item 1</Text>\n    </SideNav.Link>\n    <SideNav.Link href=\"#url\">\n      <Text>Sub item 2</Text>\n    </SideNav.Link>\n    <SideNav.Link href=\"#url\">\n      <Text>Sub item 3</Text>\n    </SideNav.Link>\n  </SideNav>\n\n  <SideNav.Link href=\"#url\">\n    <StyledOcticon mr={2} size={16} icon={Mail} />\n    <Text>Emails</Text>\n  </SideNav.Link>\n</SideNav>\n```\n\n## Usage with React Router\n\nIf using React Router, you can use the `as` prop to render the element as a `NavLink`. React Router will automatically handle setting `aria-current=\"page\"` for you.\n\n```\n<SideNav.Link as={NavLink} to=\"...\">...</SideNav.Link>\n```\n\n## System props\n\n`SideNav` components get `COMMON`, `BORDER`, `LAYOUT`, and `FLEX` system props. `SideNav.Link` components get `COMMON` and `TYPOGRAPHY` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### SideNav\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | 'nav' | Sets the HTML tag for the component. |\n| bordered | Boolean | false | Renders the component with a border. |\n| variant | String | 'normal' | Set to `lightweight` to render [in a lightweight style](#lightweight-variant). |\n\n### SideNav.Link\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | 'a' | Sets the HTML tag for the component. |\n| href      | String  |         | URL to be used for the Link                       |\n| muted     | Boolean |  false  | Uses light gray for Link color, and blue on hover |\n| selected | Boolean | false | Sets the link as selected, giving it a different style and setting the `aria-current` attribute. |\n| underline | Boolean |  false  | Adds underline to the Link                        |\n| variant | String | 'normal' | Set to `full` to render [a full variant](#full-variant), suitable for including icons and labels. |\n","parent":{"relativeDirectory":"","name":"SideNav"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/StateLabel.md","frontmatter":{"title":"StateLabel"},"rawBody":"---\ntitle: StateLabel\n---\nUse StateLabel components to show the status of an issue or pull request.\n\n## Default example\n\n```jsx live\n<StateLabel status=\"issueOpened\">Open</StateLabel>\n<StateLabel status=\"issueClosed\">Closed</StateLabel>\n<StateLabel status=\"pullOpened\">Open</StateLabel>\n<StateLabel status=\"pullClosed\">Closed</StateLabel>\n<StateLabel status=\"pullMerged\">Merged</StateLabel>\n<StateLabel status=\"draft\">Draft</StateLabel>\n```\n\n## System props\n\nStateLabel components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| variant | String | 'normal' | a value of `small` or `normal` results in a smaller or larger version of the StateLabel. |\n| status | String | | Can be one of `issueOpened`, `issueClosed`, `pullOpened`, `pullClosed`, `pullMerged`, or `draft`.\n","parent":{"relativeDirectory":"","name":"StateLabel"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/StyledOcticon.md","frontmatter":{"title":"StyledOcticon"},"rawBody":"---\ntitle: StyledOcticon\ntags: icon\n---\n\nStyledOcticon renders an [Octicon](https://octicons.github.com) with common system props, including `color`, margin, and padding.\n\n## Default example\n\n```jsx live\n<StyledOcticon icon={Check} size={32} color=\"green.5\" mr={2} />\n<StyledOcticon icon={X} size={32} color=\"red.5\" />\n```\n\n## System props\n\nStyledOcticon components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nStyledOcticon passes all of its props except the common system props down to the [Octicon component](https://github.com/primer/octicons/tree/master/lib/octicons_react#usage), including:\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| ariaLabel | String | | Specifies the `aria-label` attribute, which is read verbatim by screen readers |\n| icon | Octicon | | [Octicon component](https://github.com/primer/octicons/tree/master/lib/octicons_react) used in the component |\n| size | Number | 16 | Sets the uniform `width` and `height` of the SVG element |\n| verticalAlign | String | `text-bottom` | Sets the `vertical-align` CSS property |\n","parent":{"relativeDirectory":"","name":"StyledOcticon"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/SubNav.md","frontmatter":{"title":"SubNav"},"rawBody":"---\ntitle: SubNav\n---\n\nUse the SubNav component for navigation on a dashboard-type interface with another set of navigation components above it. This helps distinguish navigation hierarchy.\n\nTo use SubNav with [react-router](https://github.com/ReactTraining/react-router) or\n[react-router-dom](https://www.npmjs.com/package/react-router-dom), pass\n`as={NavLink}` and omit the `selected` prop.\nThis ensures that the NavLink gets `activeClassName='selected'`\n\n**Attention:** Make sure to properly label your `SubNav` with an `aria-label` to provide context about the type of navigation contained in `SubNav`.\n\n## Default example\n\n```jsx live\n<SubNav aria-label=\"Main\">\n  <SubNav.Links>\n    <SubNav.Link href=\"#home\" selected>\n      Home\n    </SubNav.Link>\n    <SubNav.Link href=\"#documentation\">Documentation</SubNav.Link>\n    <SubNav.Link href=\"#support\">Support</SubNav.Link>\n  </SubNav.Links>\n</SubNav>\n```\n\n## SubNav with search example\n\n```jsx live\n<SubNav aria-label=\"Main\">\n  <SubNav.Links>\n    <SubNav.Link href=\"#home\" selected>\n      Home\n    </SubNav.Link>\n    <SubNav.Link href=\"#documentation\">Documentation</SubNav.Link>\n    <SubNav.Link href=\"#support\">Support</SubNav.Link>\n  </SubNav.Links>\n\n  <TextInput type=\"search\" icon={Search} width={320} />\n</SubNav>\n```\n\n## SubNav with filtered search example\n\n```jsx live\n<SubNav aria-label=\"Main\">\n  <FilteredSearch>\n    <Dropdown title=\"Filter\">\n      <Dropdown.Menu direction=\"sw\">\n        <Dropdown.Item>\n          <a href=\"#\">Item 1</a>\n        </Dropdown.Item>\n        <Dropdown.Item>\n          <a href=\"#\">Item 2</a>\n        </Dropdown.Item>\n        <Dropdown.Item>\n          <a href=\"#\">Item 3</a>\n        </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n    <TextInput type=\"search\" icon={Search} width={320} />\n  </FilteredSearch>\n  <SubNav.Links>\n    <SubNav.Link href=\"#home\" selected>\n      Home\n    </SubNav.Link>\n    <SubNav.Link href=\"#documentation\">Documentation</SubNav.Link>\n    <SubNav.Link href=\"#support\">Support</SubNav.Link>\n  </SubNav.Links>\n</SubNav>\n```\n\n## System props\n\nSubNav and SubNav.Link components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### SubNav\n\n| Prop name  | Type    | Description                                                                            |\n| :--------- | :------ | :------------------------------------------------------------------------------------- |\n| actions    | Node    | Place another element, such as a button, to the opposite side of the navigation items. |\n| align      | String  | Use `right` to have navigation items aligned right.                                    |\n| full       | Boolean | Used to make navigation fill the width of the container.                               |\n| aria-label | String  | Used to set the `aria-label` on the top level `<nav>` element.                         |\n\n### SubNav.Link\n\n| Prop name | Type    | Description                                      |\n| :-------- | :------ | :----------------------------------------------- |\n| as        | String  | sets the HTML tag for the component              |\n| href      | String  | URL to be used for the Link                      |\n| selected  | Boolean | Used to style the link as selected or unselected |\n","parent":{"relativeDirectory":"","name":"SubNav"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/TabNav.md","frontmatter":{"title":"TabNav"},"rawBody":"---\ntitle: TabNav\n---\n\nUse the TabNav component to style navigation with a tab-based selected state, typically used for navigation placed at the top of the page.\n\nTo use TabNav with [react-router](https://github.com/ReactTraining/react-router) or\n[react-router-dom](https://www.npmjs.com/package/react-router-dom), pass\n`as={NavLink}` and omit the `selected` prop.\nThis ensures that the NavLink gets `activeClassName='selected'`\n\n**Attention:** Make sure to properly label your `TabNav` with an `aria-label` to provide context about the type of navigation contained in `TabNav`.\n\n## Default example\n\n```jsx live\n<TabNav aria-label=\"Main\">\n  <TabNav.Link href=\"#home\" selected>\n    Home\n  </TabNav.Link>\n  <TabNav.Link href=\"#documentation\">Documentation</TabNav.Link>\n  <TabNav.Link href=\"#support\">Support</TabNav.Link>\n</TabNav>\n```\n\n## System props\n\nTabNav and TabNav.Link components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### TabNav\n\n| Prop name  | Type   | Description                                                    |\n| :--------- | :----- | :------------------------------------------------------------- |\n| aria-label | String | Used to set the `aria-label` on the top level `<nav>` element. |\n\n### TabNav.Link\n\n| Prop name | Type    | Description                                      |\n| :-------- | :------ | :----------------------------------------------- |\n| as        | String  | sets the HTML tag for the component              |\n| href      | String  | URL to be used for the Link                      |\n| selected  | Boolean | Used to style the link as selected or unselected |\n","parent":{"relativeDirectory":"","name":"TabNav"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Text.md","frontmatter":{"title":"Text"},"rawBody":"---\ntitle: Text\n---\nThe Text component is a wrapper component that will apply typography styles to the text inside.\n\n## Default example\n```jsx live\n<Text as='p' fontWeight=\"bold\">bold</Text>\n<Text as='p' color=\"red.6\">red color</Text>\n<Text as='p' color=\"white\" bg=\"gray.9\" p={2}>white on black</Text>\n```\n\n## System props\n\nText components get `TYPOGRAPHY` and `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| as | String | `span` | Sets the HTML tag for the component|\n","parent":{"relativeDirectory":"","name":"Text"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/TextInput.md","frontmatter":{"title":"TextInput"},"rawBody":"---\ntitle: TextInput\n---\n\nTextInput is a form component to add default styling to the native text input. \n\n**Note:** Don't forget to set `aria-label` to make the TextInput accessible to screen reader users.\n## Default example\n\n```jsx live\n<TextInput aria-label=\"Zipcode\" name=\"zipcode\" placeholder=\"Zipcode\" autoComplete=\"postal-code\" />\n\n<TextInput ml={4} icon={Search} aria-label=\"Zipcode\" name=\"zipcode\" placeholder=\"Find user\" autoComplete=\"postal-code\" />\n```\n\n## System props\n\nTextInput components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\nNative `<input>` attributes are forwarded to the underlying React `input` component and are not listed below.\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| aria-label | String | | Required. Allows input to be accessible. |\n| block | Boolean | | Adds `display: block` to element |\n| variant | String | | Can be either `small` or `large`. Creates a smaller or larger input than the default.\n| width | String or Number | | Set the width of the input |\n| maxWidth | String or Number or [Array](https://styled-system.com/guides/array-props) | | Set the maximum width of the input |\n| minWidth | String or Number or [Array](https://styled-system.com/guides/array-props) | | Set the minimum width of the input |\n| icon | Node (pass Octicon react component) | | Icon to be used inside of input. Positioned on the right edge. | \n","parent":{"relativeDirectory":"","name":"TextInput"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Timeline.md","frontmatter":{"title":"Timeline"},"rawBody":"---\ntitle: Timeline\n---\n\nThe Timeline.Item component is used to display items on a vertical timeline, connected by Timeline.Badge elements.\n\n## Example with in-line links\n\n```jsx live\n<Timeline>\n  <Timeline.Item>\n    <Timeline.Badge>\n      <StyledOcticon icon={Flame} />\n    </Timeline.Badge>\n    <Timeline.Body>\n      <Link href=\"#\" fontWeight=\"bold\" color=\"gray.8\" mr={1} muted>\n        Monalisa\n      </Link>\n      created one <Link href=\"#\" fontWeight=\"bold\" color=\"gray.8\" mr={1} muted>\n        hot potato\n      </Link>\n      <Link href=\"#\" color=\"gray.7\" muted>\n        Just now\n      </Link>\n    </Timeline.Body>\n  </Timeline.Item>\n</Timeline>\n```\n\n## Default Color example\n\nThe default Timeline.Badge color is dark text on a light grey background.\n\n```jsx live\n<Timeline>\n  <Timeline.Item>\n    <Timeline.Badge>\n      <StyledOcticon icon={Flame} />\n    </Timeline.Badge>\n    <Timeline.Body>Default badge color</Timeline.Body>\n  </Timeline.Item>\n</Timeline>\n```\n\n## Adding color to a Badge\n\nTo have color variants, use the `bg` prop on the `Timeline.Badge`. If an icon is being used, set the `color` prop\nof the child `StyledOcticon` if necessary.\n\n```jsx live\n<Timeline>\n  <Timeline.Item>\n    <Timeline.Badge bg=\"red.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Red background used when closed events occur</Timeline.Body>\n  </Timeline.Item>\n  <Timeline.Item>\n    <Timeline.Badge bg=\"green.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Green background when opened or passed events occur</Timeline.Body>\n  </Timeline.Item>\n  <Timeline.Item>\n    <Timeline.Badge bg=\"purple.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Purple background used when pull requests are merged</Timeline.Body>\n  </Timeline.Item>\n  <Timeline.Item>\n    <Timeline.Badge bg=\"blue.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Blue background to indicate new events below</Timeline.Body>\n  </Timeline.Item>\n</Timeline>\n```\n\n## Condensed items\n\nTimeline has a condensed prop that will reduce the vertical padding and remove the background from the badge item. These are most commonly used in commits. To condense a single item, remove the top or bottom padding with the `pt={0}` or `pb={0}` prop.\n\n```jsx live\n<Timeline>\n  <Timeline.Item condensed>\n    <Timeline.Badge>\n      <StyledOcticon icon={GitCommit} />\n    </Timeline.Badge>\n    <Timeline.Body>This is the message of a condensed TimelineItem</Timeline.Body>\n  </Timeline.Item>\n  <Timeline.Item condensed>\n    <Timeline.Badge>\n      <StyledOcticon icon={GitCommit} />\n    </Timeline.Badge>\n    <Timeline.Body>This is the message of a condensed TimelineItem</Timeline.Body>\n  </Timeline.Item>\n</Timeline>\n```\n\n## Timeline Break\n\nTo create a visual break in the timeline, use Timeline.Break. This adds a horizontal bar across the timeline to show that something has disrupted it. Usually this happens when a close or merged event occurs.\n\n```jsx live\n<Timeline>\n  <Timeline.Item>\n    <Timeline.Badge bg=\"red.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Red background used when closed events occur</Timeline.Body>\n  </Timeline.Item>\n  <Timeline.Break />\n  <Timeline.Item>\n    <Timeline.Badge bg=\"green.5\">\n      <StyledOcticon icon={Flame} color=\"white\" />\n    </Timeline.Badge>\n    <Timeline.Body>Green background when opened or passed events occur</Timeline.Body>\n  </Timeline.Item>\n</Timeline>\n```\n\n## System props\n\nTimeline and Timeline.Item components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### Timeline\n\n| Prop name   | Type    | Description                                                                       |\n| :---------- | :------ | :-------------------------------------------------------------------------------- |\n| clipSidebar | Boolean | Hides the sidebar above the first Timeline.Item and below the last Timeline.Item. |\n\n### Timeline.Item\n\n| Prop name | Type    | Description                                                           |\n| :-------- | :------ | :-------------------------------------------------------------------- |\n| condensed | Boolean | Reduces vertical padding and removes background from an item's badge. |\n","parent":{"relativeDirectory":"","name":"Timeline"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Tooltip.md","frontmatter":{"title":"Tooltip"},"rawBody":"---\ntitle: Tooltip\n---\n\nThe Tooltip component adds a tooltip to add context to elements on the page. The Tooltip has a black background by default.\n\n***⚠️ Usage warning! ⚠️***\n\nTooltips as a UI pattern should be our last resort for conveying information because it is hidden by default and often with zero or little visual indicator of its existence.\n\nBefore adding a tooltip, please consider: Is this information essential and necessary? Can the UI be made clearer? Can the information be shown on the page by default?\n\n**Attention:** we use aria-label for tooltip contents, because it is crucial that they are accessible to screen reader users. However, aria-label replaces the text content of an element in screen readers, so only use Tooltip on elements with no existing text content, or consider using `title` for supplemental information.\n\n\n\n## Default example\n\n```jsx live\n<BorderBox p={3}>\n  <Tooltip aria-label=\"Hello, Tooltip!\">Text with a tooltip</Tooltip>\n</BorderBox>\n```\n\n## System props\n\nTooltip components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| align | String | | Can be either `left` or `right`.|\n| direction | String | | Can be one of `n`, `ne`, `e`, `se`, `s`, `sw`, `w`, `nw` | Sets where the tooltip renders in relation to the target. |\n| noDelay | Boolean | | When set to `true`, tooltip appears without any delay |\n| aria-label | String | | Text used in `aria-label` (for accessibility).\n| wrap | Boolean | | Use `true` to allow text within tooltip to wrap.\n","parent":{"relativeDirectory":"","name":"Tooltip"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/Truncate.md","frontmatter":{"title":"Truncate"},"rawBody":"---\ntitle: Truncate\n---\n\nThe Truncate component will shorten text with an ellipsis. Always add a `title` attribute to the truncated element so the full text remains accessible.\n\n## Default example\n\nTruncate will prevent text that overflows from wrapping. The default max-width is 125px.\n\n```jsx live\n<Truncate title=\"Some text with a branch-name-that-is-really-long\">\n  Some text with a branch-name-that-is-really-long\n</Truncate>\n```\n\n## Custom max-width example\n\nYou can override the maximum width of the truncated text with the `maxWidth` prop.\n\n```jsx live\n<Truncate maxWidth={250} title=\"Some text with a branch-name-that-is-really-long\">\n  Some text with a branch-name-that-is-really-long\n</Truncate>\n```\n\n## Inline example\n\nYou can use the `inline` boolean prop for inline (or inline-block) elements with a fixed maximum width (default: 125px).\n\n```jsx live\n  Some text with a{' '}\n  <Truncate as=\"strong\" inline title=\"branch-name-that-is-really-long\">\n    branch-name-that-is-really-long\n  </Truncate>\n```\n\n## Expandable example\n\nYou can use the `expandable` boolean prop to display the truncated text on hover.\n\n```jsx live\n<Truncate expandable title=\"Some text with a branch-name-that-is-really-long\">\n  Some text with a branch-name-that-is-really-long\n</Truncate>\n```\n\n## System props\n\nTruncate components get `TYPOGRAPHY` and `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n| Name       | Type    | Default | Description                                                  |\n| :--------- | :------ | :-----: | :----------------------------------------------------------- |\n| as         | String  |  `div`  | Sets the HTML tag for the component                          |\n| maxWidth   | Number  |   125   | Sets the max-width of the text                               |\n| inline     | Boolean |  false  | displays text as inline block and vertical aligns to the top |\n| expandable | Boolean |  false  | allows the truncated text to be displayed on hover           |\n","parent":{"relativeDirectory":"","name":"Truncate"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/UnderlineNav.md","frontmatter":{"title":"UnderlineNav"},"rawBody":"---\ntitle: UnderlineNav\n---\n\nUse the UnderlineNav component to style navigation with a minimal underlined selected state, typically used for navigation placed at the top of the page.\n\nTo use UnderlineNav with [react-router](https://github.com/ReactTraining/react-router) or\n[react-router-dom](https://www.npmjs.com/package/react-router-dom), pass\n`as={NavLink}` and omit the `selected` prop.\nThis ensures that the NavLink gets `activeClassName='selected'`\n\n**Attention:** Make sure to properly label your `UnderlineNav` with an `aria-label` to provide context about the type of navigation contained in `UnderlineNav`.\n\n## Default example\n\n```jsx live\n<UnderlineNav aria-label=\"Main\">\n  <UnderlineNav.Link href=\"#home\" selected>\n    Home\n  </UnderlineNav.Link>\n  <UnderlineNav.Link href=\"#documentation\">Documentation</UnderlineNav.Link>\n  <UnderlineNav.Link href=\"#support\">Support</UnderlineNav.Link>\n</UnderlineNav>\n```\n\n## System props\n\nUnderlineNav and UnderlineNav.Link components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n## Component props\n\n### UnderlineNav\n\n| Prop name  | Type    | Description                                                                            |\n| :--------- | :------ | :------------------------------------------------------------------------------------- |\n| actions    | Node    | Place another element, such as a button, to the opposite side of the navigation items. |\n| align      | String  | Use `right` to have navigation items aligned right.                                    |\n| full       | Boolean | Used to make navigation fill the width of the container.                               |\n| aria-label | String  | Used to set the `aria-label` on the top level `<nav>` element.                         |\n\n### UnderlineNav.Link\n\n| Prop name | Type    | Description                                      |\n| :-------- | :------ | :----------------------------------------------- |\n| as        | String  | sets the HTML tag for the component              |\n| href      | String  | URL to be used for the Link                      |\n| selected  | Boolean | Used to style the link as selected or unselected |\n","parent":{"relativeDirectory":"","name":"UnderlineNav"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/core-concepts.md","frontmatter":{"title":"Core Concepts"},"rawBody":"---\ntitle: Core Concepts\n---\n\nThis document aims to discuss some of the core concepts of building with Primer Components.\n\n## Responsive props\nIt's really easy to set different values for most of our component props based on screen size! We take advantage of [styled-system](https://github.com/styled-system/styled-system)'s responsive props API in our components.\n\n```\n<Button display={['flex', 'flex', 'none']}/>\n\nor\n\n<Text fontSize={[1,1,1,4]}/>\n```\n\n## Providing your own theme\n\nYou can provide your own theme to Primer Components! There are a few ways of doing this to varying degrees, checkout the [theme docs](https://primer.style/components/primer-theme) for more information.\n\n## The `css` prop\nWhen push comes to shove and you just _really_ need to add a custom CSS rule, you can do that with the `css` prop. Please don't abuse this :)\n\n```\n<Box css='border-bottom-right-radius: 0px' />\n\n```\n\nPlease note that you will need to have the **[styled-components babel plugin](https://www.styled-components.com/docs/tooling#babel-plugin)** set up in your project in order to use the `css` prop.\n\n## Types of components\n\nWe categorize our components into 3 general types. Building block components, pattern components, and helper components. Understanding how these types of components interact with each other can help you better understand how to get the most out of Primer Components.\n\n- Building Blocks\n\n Building block components are components that are basic in their functions and can be used together with other components to build just about any UI. Some examples of building block components are `Box`, `Avatar`, `Details`, and `Link`.\n\n - Pattern Components\n\n Pattern components are components that are made up of several building block components to represent a commonly used pattern in our UI. Some examples of pattern components are `UnderlineNav` and `FilterList`. We plan on expanding our offering of pattern components in the near future.\n\n - Helper Components\n\n Helper components are components that help the user achieve common CSS patterns while maintaining some control over values used. Some examples of helper components are `Flex`, `Text`, `Grid`, and the `Position` components.\n\n\n ## The `as` prop\n The `as` prop is a feature that all of our components get from [styled-components](https://www.styled-components.com). It allows you to pass a HTML tag or another component to a Primer Component to be rendered as the base tag of that component along with all of it's styles and props.\n\n\n For example, say you are using a `Button` component, and you really need to apply `Flex` styles to it. You can compose `Flex` and `Button` like so:\n\n ```.jsx\n <Flex as={Button} href='https://github.com'>Hello</Flex>\n ```\n\n This will allow you to use all of the `Button` props _and_ all of the `Flex` props without having to wrap your `Button` component in another `Flex` component.\n\n **This pattern does have some limitations.** Usage of the `as` prop can lead to unexpected output. In the example above, if the user had done `<Button as={Flex}/>` instead, because the `Flex`'s render method is ultimately applied, and `Flex` components render `div`'s, you'll see that the rendered component is a `div` when ideally you'd like it to be a `button`. It is also not always clear how the styles in both components will interact and/or override each other.\n\nFor these reasons, **we recommend only using the `as` prop when you cannot achieve the same result by nesting components.** The `Flex` / `Button` example could be done like so:\n\n```.jsx\n<Flex>\n  <Button href='https://github.com'>Hi</Button>\n</Flex>\n```\n","parent":{"relativeDirectory":"","name":"core-concepts"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/getting-started.md","frontmatter":{"title":"Getting Started"},"rawBody":"---\ntitle: Getting Started\n---\n\n## Installation\n\nTo get started using Primer Components, install the package and its peer dependencies with your package manager of choice:\n\n```bash\n# with npm\nnpm install @primer/components react react-dom styled-components\n\n# with yarn\nyarn add @primer/components react react-dom styled-components\n```\n\nYou can now import Primer Components from the main package module:\n\n```javascript\n// using import syntax\nimport {Box, Flex} from '@primer/components'\n\n// using require syntax\nconst {Box, Flex} = require('@primer/components')\n```\n\n### Minimizing bundle size\n\nModule bundlers that use ECMAScript modules (ESM) will automatically tree-shake Primer Components, ensuring that no unused code is included in your final bundle. However, if you're not using ESM, you may be able to drastically reduce the size of your final bundle by importing components individually from the `lib` subfolder:\n\n```javascript\n// using import syntax\nimport Box from '@primer/components/lib/Box'\nimport Flex from '@primer/components/lib/Flex'\n\n// using require syntax\nconst Box = require('@primer/components/lib/Box')\nconst Flex = require('@primer/components/lib/Flex')\n```\n\nNote that the modules in the `lib` folder are CommonJS-style modules; if you're using ESM and a compatible module bundler, importing files individually from `lib` provides no benefit.\n\n### Peer dependencies\n\nPrimer Components ships with a few libraries labeled as peer dependencies. These libraries are separated because they are commonly already installed in the host project and having multiple versions can introduce errors.\n\nPrimer Components requires the following libraries to be installed along with it:\n\n- `styled-components` at version 4.0.0 or higher\n- `react` at versions 16.8.0 or higher\n- `react-dom` at versions 16.8.0 or higher\n\n## BaseStyles\n\nIn order to set baseline color, font-family, and line-heights across your project, you will need to establish base Primer styles for your app by wrapping all of your Primer components in `<BaseStyles>` at the root of your app:\n\n```jsx\nimport {BaseStyles, Box, Heading} from '@primer/components'\n\nexport default const MyApp = () => (\n  <BaseStyles>\n    <Box m={4}>\n      <Heading mb={2}>Hello, world!</Heading>\n      <p>This will get Primer text styles.</p>\n    </Box>\n  </BaseStyles>\n)\n```\n\nThis will apply the same `color`, `font-family`, and `line-height` styles to the `<body>` as [Primer CSS's base styles](https://github.com/primer/css/blob/master/src/base/base.scss#L15-L20).\n\n## Theming\n\nComponents are styled using Primer's [theme](https://github.com/primer/components/blob/master/src/theme-preval.js) by default, but you can provide your own theme by using [styled-component's](https://styled-components.com/) `<ThemeProvider>`. If you'd like to fully replace the Primer [theme](https://github.com/primer/components/blob/master/src/theme-preval.js) with your custom theme, pass your theme to the `<ThemeProvider>` in the root of your application like so:\n\n```jsx\nimport {ThemeProvider} from 'styled-components'\n\nconst theme = { ... }\n\nconst App = (props) => {\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <div>your app here</div>\n      </ThemeProvider>\n    </div>\n  )\n}\n```\n\nIf you'd like to merge the Primer theme with your theme, you can do so by importing the Primer theme and then merging the themes using a library like [deepmerge](https://www.npmjs.com/package/deepmerge):\n\n```jsx\nimport {ThemeProvider} from 'styled-components'\nimport {theme} from '@primer/components'\nimport deepmerge from 'deepmerge'\n\nconst customTheme = { ... }\nconst newTheme = deepmerge(theme, customTheme, {\n  // overwrite arrays instead of concatenating\n  arrayMerge: (_dest, source) => source\n})\n\n\nconst App = (props) => {\n  return (\n    <div>\n      <ThemeProvider theme={deepmerge(theme, )}>\n        <div>your app here</div>\n      </ThemeProvider>\n    </div>\n  )\n}\n```\n\nNote that using `Object.assign` to merge themes will only create a shallow merge. This means that if both themes have a `color` object, the _entire_ `color` object will be replaced with the new `color` object, instead of only replacing duplicate values from the original theme's color object. If you want to merge sub-values, be sure to use a deep-merging strategy.\n\n## Static CSS rendering\n\nIf you're rendering React components both server- and client-side, we suggest following [styled-component's server-side rendering instructions](https://www.styled-components.com/docs/advanced#server-side-rendering) to avoid the flash of unstyled content for server-rendered components.\n\n## TypeScript\n\nPrimer Components includes TypeScript support and ships with its own typings. You will need still need to to install type typings for the peer dependencies if you import those in your own application code.\n\nOnce installed, you can import components and their prop type interfaces from the `@primer/components` package:\n\n```typescript\nimport {BorderBox, BorderBoxProps} from '@primer/components'\n```\n\n### Fixing \"Duplicate identifier 'FormData'\"\n\nEver since `@types/styled-components` version `14.1.19`, it has had a dependency on both `@types/react` and `@types/react-native`. Unfortunately, those declarations clash; for more information, see [issue 33311](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33311) and [issue 33015](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33015) in the DefinitelyTyped repo.\n\nYou may run into this conflict even if you're not importing anything from `react-native` or don't have it installed. This is because some package managers hoist packages to the top-level `node_modules` folder, and the TypeScript compiler automatically includes types from all folders in `node_modules/@types` by default.\n\nThe TypeScript compiler allows you to opt-out of this behavior [using the `typeRoots` and `types` configuration options](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types), and the best solution for this error — for now — seems to be to opt out the automatic inclusion of `node_modules/@types` and instead list the types you want to be included individually.\n\nIn your `tsconfig.json`, set the `types` array under the `compilerOptions` like so:\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\"node\", \"react\", \"styled-components\", \"jest\"]\n  }\n}\n```\n\nOf course, customize the array based on the `@types/` packages you have installed for your project.\n\n## Silencing warnings\n\nLike React, Primer Components emits warnings to the JavaScript console under certain conditions, like using deprecated components or props. Similar to React, you can silence these warnings by setting the `NODE_ENV` environment variable to `production` during bundling.\n","parent":{"relativeDirectory":"","name":"getting-started"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/index.md","frontmatter":{"title":"Getting Started"},"rawBody":"---\ntitle: Getting Started\n---\n\nimport {HeroLayout} from '@primer/gatsby-theme-doctocat'\nexport default HeroLayout\n\n## Primer Components\n\nPrimer Components is a React implementation of GitHub's [Primer Design System](https://primer.style/) 🎉\n\n## Principles\n\n* Everything is a component.\n* Aim for total style encapsulation; don't rely on inheritance to provide default styles.\n* Build small building blocks with minimal props to keep complexity low.\n* Keep system constrained by only including props needed per component.\n* Favor wrapping or extending components for more complex operations.\n* Maintain design system consistency with utilities as props (for spacing, color, font-size, line-height, widths, and radii).\n\n## Getting started\n\nCheck out [our getting started guide](/getting-started) for everything you need to know about installing and using Primer Components.\n\n## Local development\n\nTo run `@primer/components` locally when adding or updating components:\n\n1. Clone this repo: `git clone https://github.com/primer/components`\n2. Install dependencies: `yarn`\n3. Run the dev app: `yarn start`\n\n> 👉 See [the contributing docs](https://github.com/primer/components/blob/master/CONTRIBUTING.md) for more info on code style, testing, and coverage.\n","parent":{"relativeDirectory":"","name":"index"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/overriding-styles.mdx","frontmatter":{"title":"Overriding styles with the sx prop"},"rawBody":"---\ntitle: Overriding styles with the sx prop\n---\n\nOur goal with Primer Components is to hit the sweet spot between providing too little and too much styling flexibility; too little and the design system is too rigid, and too much and it becomes too difficult to maintain a consistent style. Our components already support a standard set of [system props](/system-props), but sometimes a component just isn't *quite* flexible enough to look the way you need it to look. For those cases, we provide the `sx` prop.\n\nThe `sx` prop allows ad-hoc styling that is still theme aware. Declare the styles you want to apply in camel-cased object notation, and try to use theme values in appropriate CSS properties when possible. If you've passed a custom theme using `ThemeProvider` or a `theme` prop, the `sx` prop will honor the custom theme. For more information on theming in Primer Components, check out [the Primer Theme documentation](/primer-theme).\n\n## When to use the `sx` prop\n\nThe `sx` prop provides a lot of power, which means it is an easy tool to abuse. To best make use of it, we recommend following these guidelines:\n\n* Use the `sx` prop for small stylistic changes to components. For more substantial changes, consider abstracting your style changes into your own wrapper component.\n* Use [system props](/system-props) instead of the `sx` prop whenever possible.\n* Avoid nesting and pseudo-selectors in `sx` prop values when possible.\n\n## Basic example\n\nThis example demonstrates applying a bottom border to `Heading`, a component that does not receive `BORDER` system props. The `borderBottomWidth` value comes from `theme.borderWidths` and `borderBottomColor` comes from `theme.colors`.\n\n```jsx live\n<Heading pb={2}>Heading</Heading>\n\n<Heading\n  pb={2}\n  sx={{\n    borderBottomWidth: 1,\n    borderBottomColor: 'border.gray',\n    borderBottomStyle: 'solid'\n  }}>\n    Heading with bottom border\n</Heading>\n```\n\n## Responsive values\n\nJust like [values passed to system props](https://styled-system.com/responsive-styles), values in the `sx` prop can be provided as arrays to provide responsive styling.\n\n```jsx live\n<BorderBox\n  p={2}\n  sx={{\n    bg: ['red.1', 'green.1', 'blue.1', 'purple.1', 'yellow.1']\n  }}>\n    Responsive background color\n</BorderBox>\n```\n\n## Nesting, pseudo-classes, and pseudo-elements\n\nThe `sx` prop also allows for declaring styles based on media queries, psueudo-classes, and pseudo-elements. This example, though contrived, demonstrates the ability:\n\n```jsx live\n<Box>\n  <Box>First</Box>\n  <Box>Second</Box>\n  <Box>Third</Box>\n</Box>\n```\n","parent":{"relativeDirectory":"","name":"overriding-styles"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/philosophy.md","frontmatter":{"title":"Primer Components Philosophy"},"rawBody":"---\ntitle: Primer Components Philosophy\n---\n\n## Presentational Components\n We are focusing primarily on presentational components that help standardize common design patterns. Primer Components don't handle fetching and submitting data to/from APIs. If you would like to handle data in a Primer Component, feel free to create a wrapper around the Primer Component to do so.\n\n## Assume that people will break the rules, provide safe ways for them to do so\nWhile we aim to standardize design in Primer Components, we also provide some flexibility with constraint-based props. We offer system props via [styled-system](https://github.com/styled-system/styled-system) to allow users of the components to make small customizations, such as color and spacing, using values from the theme. Users also have the option to override the theme with a theme of their own.\n\n\n## Pattern Components vs Helper Components\n\nOur components can roughly be categorized into two different component types:\n\n\n- Pattern Components\n\nPattern components help us repeat commonly used UI patterns and interactions in order to maintain our brand and provide a great user experience. Some examples of pattern components are `Button`, `Avatar`, or `Label`.\n\n- Helper Components\n\nHelper components are components that help the user achieve common CSS patterns while maintaining some control over values used. Some examples of helper components are `Flex`, `Text`, `Grid`, and the `Position` components.\n","parent":{"relativeDirectory":"","name":"philosophy"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/primer-theme.md","frontmatter":{"title":"Primer Theme"},"rawBody":"---\ntitle: Primer Theme\n---\n\nimport {theme} from '@primer/components'\n\nPrimer Components come with built-in access to our Primer theme. The [theme file](https://github.com/primer/components/blob/master/src/theme-preval.js) contains an object which holds values for common variables such as color, fonts, box shadows, and more. Our theme file pulls many of its color and typography values from [primer-primitives](https://github.com/primer/primer-primitives).\n\nMany of our theme keys correspond to system props on our components. For example, if you'd like to set the max width on a `<Box>` set the `maxWidth` prop to `medium`: `<Box maxWidth='medium'>`\n\nIn the background, [styled-system](https://github.com/styled-system/styled-system) does the work of finding the `medium` value from `maxWidth` key in the theme file and applying the corresponding CSS.\n\nOur full theme can be found [here](https://github.com/primer/components/blob/master/src/theme-preval.js).\n\n### Custom Theming\n\nCustom theming is an optional way to override the Primer values that control color, spacing, typography, and other aspects of our components.\n\nThere are two ways to change the theme of Primer components:\n\n1. You can override the entire theme for an entire tree of components using the `<ThemeProvider>` from [styled-components]:\n\n    ```javascript\n    import {Block, Button, Text, theme as primer} from '@primer/components'\n    import {ThemeProvider} from 'styled-components'\n\n    // a theme with custom spacing and font sizes\n    const theme = {\n      ...primer,\n      space: [0, 8, 16, 32, 64],\n      fontSizes: [10, 12, 16, 24, 48]\n    }\n\n    // override\n    theme.colors.bodytext = '#111'\n\n    export default () => (\n      <ThemeProvider theme={theme}>\n        <Block color='bodytext' p={4}>\n          <Text fontSize={4}>Hello, world!</Text>\n        </Block>\n      </ThemeProvider>\n    )\n    ```\n\n    **⚠️ Note: [styled-components]'s `<ThemeProvider>` only allows exactly one child.**\n\n2. You can merge the Primer theme with your custom theme using Object.assign:\n\n    ```javascript\n    import {ThemeProvider} from `styled-components`\n    import {theme} from '@primer/components'\n\n    const customTheme = { ... }\n\n    const App = (props) => {\n      return (\n        <div>\n          <ThemeProvider theme={Object.assign({}, theme, customTheme)}> // matching keys in customTheme will override keys in the Primer theme\n            <div>your app here</div>\n          </ThemeProvider>\n        </div>\n      )\n    }\n    ```\n\n3. You can theme individual components by passing the `theme` prop directly:\n\n    ```javascript\n    import {Text} from '@primer/components'\n\n    const theme = {\n      colors: {\n        magenta: '#f0f'\n      }\n    }\n\n    export default () => (\n      <Text theme={theme} color='magenta'>Hi, I'm magenta!</Text>\n    )\n    ```\n\n    **☝️ This is an intentionally convoluted example, since you can use `<Text color='#f0f'>` out of the box.**\n\nRead the [styled-system docs](https://styled-system.com/#theming) for more information on theming in styled-system.\n\n[styled-components]: https://styled-components.com/\n","parent":{"relativeDirectory":"","name":"primer-theme"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/system-props.mdx","frontmatter":{"title":"System Props"},"rawBody":"---\ntitle: System Props\n---\n\nimport {PropsList, COMMON, LAYOUT, BORDER, TYPOGRAPHY, FLEX, POSITION, GRID} from '../components'\n\nPrimer Components utilize what we call \"system props\" to apply a standard set of props to each component. Using [styled-system](https://github.com/jxnblk/styled-system), groups of props are automatically applied to each component. Most components get the `COMMON` set of props which give the component access to color and space props (margin, padding, color and background color). These groups correspond to the `color` and `space` functions from `styled-system` which can be referenced in the styled system [table of style functions](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#core).\n\nTo check which system props each component includes, check the documentation for that component.\n\n### The `as` prop\nAll Primer Components have access to the `as` prop, provided by [styled-components](https://www.styled-components.com/docs/api#as-polymorphic-prop). We use the `as` prop to render a component with the styles of the passed component in `as`, but with the system props of the base component.\n\nFor example, if you wanted to add some flex utilities to the `Text` component, you could do:\n\n```jsx live\n<Text as={Flex}>Hello!</Text>\n```\n\n\n### System Prop Categories\n\n| Category       | Included Props           | styled-system docs  |\n|-----|--------|--------|\n| `COMMON`| <PropsList systemProps={COMMON}/>| [styled-system core docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#core) |\n| `TYPOGRAPHY`| <PropsList systemProps={TYPOGRAPHY}/> | [styled-system typography docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#typography) |\n| `BORDER`| <PropsList systemProps={BORDER}/> | [styled-system border docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#border) |\n| `LAYOUT` | <PropsList systemProps={LAYOUT}/>| [styled-system layout docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#layout) <br/> [styled-system misc docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#misc) |\n| `POSITION` | <PropsList systemProps={POSITION}/>| [styled-system position docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#position)\n| `FLEX` | <PropsList systemProps={FLEX}/> | [styled-system flexbox docs](https://github.com/jxnblk/styled-system/blob/master/docs/table.md#flexbox) |\n| `GRID` | <PropsList systemProps={GRID}/> | [styled-system grid docs](https://github.com/styled-system/styled-system/blob/master/docs/table.md#grid-layout) |\n","parent":{"relativeDirectory":"","name":"system-props"}},{"fileAbsolutePath":"/home/runner/work/components/components/docs/content/SelectMenu.md","frontmatter":{"title":"SelectMenu"},"rawBody":"---\ntitle: SelectMenu\n---\n\nThe `SelectMenu` components are a suite of components which can be combined together to make several different variations of our GitHub select menu. At it's most basic form, a select menu is comprised of a `SelectMenu` wrapper, which contains a `summary` component of your choice and a `Select.Modal` which contains the select menu content. Use `SelectMenu.List` to wrap items in the select menu, and `SelectMenu.Item` to wrap each item.\n\nSeveral additional components exist to provide even more functionality: `SelectMenu.Header`, `SelectMenu.Filter`, `SelectMenu.Tabs`, `SelectMenu.TabPanel` `SelectMenu.Footer` and `SelectMenu.Divider`.\n\n## Basic Example\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n## SelectMenu\nMain wrapper component for select menu.\n\n```jsx\n<SelectMenu>\n  {/* all other sub components are wrapped here*/}\n</SelectMenu>\n```\n\n### System props\n\nSelectMenu components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| initialTab | String | | If using the `SelectMenu.Tabs` component, you can use this prop to change the tab shown on open. By default, the first tab will be used.\n\n## SelectMenu.MenuContext\nSelectMenu.MenuContext is a [context object](https://reactjs.org/docs/context.html#reactcreatecontext) that exposes some helpful state values to be used via [`React.useContext`](https://reactjs.org/docs/hooks-reference.html#usecontext) in consuming applications.  SelectMenu.MenuContext can only be used in components that are already wrapped in a `SelectMenu` as `SelectMenu` contains the [context provider](https://reactjs.org/docs/context.html#contextprovider).\n\n### Values available on MenuContext\n| Name | Type | Description |\n| :- | :- | :- |\n| selectedTab | string | The currently selected tab |\n| setSelectedTab | function | Used to update the currently selected tab state |\n| open | boolean | State for open/closed status of the menu modal  |\n| setOpen | function | Used to update the `open` state |\n| initialTab | string | Mostly used internally to pass down which tab should be set to open by default. To change this value use the `initialTab` prop on `SelectMenu`. |\n\n\n### Example Usage\n```jsx\nimport {SelectMenu, Button} from `@primer/components`\nimport React, {useContext} from 'react'\n\nconst MyMenu = () => {\n  <SelectMenu>\n    <MyButton as=\"summary\" />\n    <SelectMenu.Modal>\n      content\n    </SelectMenu.Modal>\n  </SelectMenu>\n}\n\n// note that we can only use the context in components that are already wrapped by SelectMenu (and thus the Context.Provider)\nconst MyButton = () => {\n  const menuContext = useContext(SelectMenu.MenuContext);\n\n  return (\n    <Button as=\"summary\">{menuContext.open ? 'Open' : 'Closed'}</Button>\n  )\n}\n```\n\n## SelectMenu.Modal\nUsed to wrap the content in a `SelectMenu`.\n\n```jsx\n<SelectMenu.Modal>\n  {/* all menu content is wrapped in the modal*/}\n</SelectMenu.Menu>\n```\n\n### Right-aligned modal\n\nUse the `align='right'` prop to align the modal to the right. Note that this only modifies alignment for the modal, and not the SelectMenu itself. You will need to wrap the SelectMenu in a relatively positioned element for this to work properly.\n\n```jsx live\n<Relative display=\"flex\" justifyContent=\"flex-end\">\n  <SelectMenu>\n    <Button as=\"summary\">Projects</Button>\n    <SelectMenu.Modal align=\"right\">\n      <SelectMenu.Header>Projects</SelectMenu.Header>\n      <SelectMenu.List>\n        <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      </SelectMenu.List>\n    </SelectMenu.Modal>\n  </SelectMenu>\n</Relative>\n```\n\n### System Props\n\nSelectMenu.Modal components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\n\n| Prop name | Type   | Default | Description                                       |\n| :-------- | :----- | :------ | ------------------------------------------------- |\n| align     | String | 'left'  | Use `right` to align the select menu to the right |\n\n\n## SelectMenu.List\n\nUsed to wrap the select menu list content.  All menu items **must** be wrapped in a SelectMenu.List in order for the accessbility keyboard handling to function properly. If you are using the `SelectMenu.TabPanel` you do not need to provide a `SelectMenu.List` as that component renders a `SelectMenu.List` as a wrapper.\n\n```jsx\n<SelectMenu.List>\n  {/* all menu  list items are wrapped in the list*/}\n</SelectMenu.List>\n```\n\n### System Props\n\nSelectMenu.List components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.List components do not get any additional props besides system props.\n\n\n## SelectMenu.Item\n\nIndividual items in a select menu. SelectMenu.Item renders an anchor tag by default, you'll need to make sure to provide the appropriate `href`. \n\nYou can use a `button` tag instead by utilizing the [`as` prop](/core-concepts#the-as-prop). Be sure to consider [which HTML element is the right choice](https://marcysutton.com/links-vs-buttons-in-modern-web-applications) for your usage of the component. \n\n```jsx\n<SelectMenu.Item href=\"/link/to/thing\" selected={true}>\n  {/* wraps an individual list item*/}\n</SelectMenu.Item>\n```\n\n### System Props\n\nSelectMenu.Item components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| selected | boolean | | Used to apply styles to the selected items in the list. |\n| onClick | function | | Function called when item is clicked. By default we also close the menu when items are clicked. If you would like the menu to stay open, pass an `e.preventDefault()` to your onClick handler.  |\n\n## SelectMenu.Filter\nUse a `SelectMenu.Filter` to add a filter UI to your select menu. Users are expected to implement their own filtering and manage the state of the `value` prop on the input. This gives users more flexibility over the type of filtering and type of content passed into each select menu item.\n\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Filter by Project</SelectMenu.Header>\n    <SelectMenu.Filter placeholder=\"Filter projects\" value=\"\" aria-label=\"Filter Projects\"/>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n\n### System Props\nSelectMenu.Filter components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.Filter components receive all the props that the [TextInput](/TextInput) component gets.\n\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| value | String | | Users of this component must provide a value for the filter input that is managed in the consuming application |\n\n\n## SelectMenu.Tabs\nUse `SelectMenu.Tabs` to wrap the the tab navigation and `SelectMenu.Tab` for each tab in the navigation.\n\n`SelectMenu.TabPanel` should wrap each corresponding panel for each of the tabs. The `tabName` prop for each `SelectMenu.TabPanel` must match the name provided in the `tabName` prop on `SelectMenu.Tab`.\n\nTo set one of the tabs to be open by default, use `initialTab` on the main `SelectMenu` component. Otherwise, the first tab will be shown by default.\n\nEach `Select.Menu` tab will need to have an `index` prop. The first tab should be at index `0`, the second at index `1` and so forth. The `index` prop is used to show the first tab by default.\n\nIf you need access to the selected tab state, you can find it in the MenuContext object exported from `SelectMenu` as `MenuContext.selectedTab`.\n\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.Tabs>\n      <SelectMenu.Tab index={0} tabName=\"Repository\"/>\n      <SelectMenu.Tab index={1} tabName=\"Organization\"/>\n    </SelectMenu.Tabs>\n    <SelectMenu.TabPanel tabName=\"Repository\">\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.TabPanel tabName=\"Organization\">\n      <SelectMenu.Item href=\"#\"> Project 2</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.Footer>Showing 3 of 3</SelectMenu.Footer>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n### System Props\n\nSelectMenu.Tabs components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.Tabs components do not get any additional props besides system props.\n\n## SelectMenu.Tab\nUsed for each individual tab inside of a `SelectMenu.Tabs`. Be sure to set the `index` prop to correspond to the order the tab is in. The `tabName` prop should correspond to the `tabName` set on the `SelectMenu.TabPanel`.\n\nThe `onClick` prop is optional and can be used for any events or data fetching you might need to trigger on tab clicks.\n\n```jsx\n<SelectMenu.Tab index={0} tabName=\"Repository\"/>\n<SelectMenu.Tab index={1} tabName=\"Organization\"/>\n```\n\n### System Props\nSelectMenu.Tab components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| tabName | String | | Used to identify the corresponding tab. Must match the string used in the `tabs` array in the `SelectMenu.Tabs` component. |\n| index | Number | | The index at which the tab is in the list of tabs |\n| onClick | Function | | Function to be called when the tab is clicked. Optional. |\n\n## SelectMenu.TabPanel\nWraps the content for each tab. Make sure to use the `tabName` prop to identify each tab panel with the correct tab in the tab navigation.\n\n**Note**: SelectMenu.TabPanel wraps content in a SelectMenu.List, so adding a SelectMenu.List manually is not necessary.\n\n```jsx\n<SelectMenu.TabPanel tabName=\"Repository\">\n  {/* Wraps content for each tab */}\n</SelectMenu.TabPanel>\n```\n\n### System Props\nSelectMenu.TabPanel components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\n| Name | Type | Default | Description |\n| :- | :- | :-: | :- |\n| tabName | String | | Used to identify the corresponding tab. Must match the string used in the `tabs` array in the `SelectMenu.Tabs` component.\n\n## SelectMenu.Divider\nUse a `SelectMenu.Divider` to add information between items in a `SelectMenu.List`.\n\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n### System Props\n\nSelectMenu.Divder components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.Divider components do not get any additional props besides system props.\n\n## SelectMenu.Footer\nUse a `SelectMenu.Footer` to add content to the bottom of the select menu.\n\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n### System Props\n\nSelectMenu.Footer components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.Footer components do not get any additional props besides system props.\n\n## SelectMenu.Header\nUse a `SelectMenu.Header` to add a header to the top of the select menu content.\n\n```jsx live\n<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n```\n\n### System Props\n\nSelectMenu.Header components get `COMMON` system props. Read our [System Props](/system-props) doc page for a full list of available props.\n\n### Component Props\nSelectMenu.Header components do not get any additional props besides system props.\n","parent":{"relativeDirectory":"","name":"SelectMenu"}}]}}}