(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{"/VrN":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),l=n("NC8T");var c={},r={_frontmatter:c},o=l.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,l={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)(o,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," components are a suite of components which can be combined together to make several different variations of our GitHub select menu. At it's most basic form, a select menu is comprised of a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," wrapper, which contains a ",Object(a.b)("inlineCode",{parentName:"p"},"summary")," component of your choice and a ",Object(a.b)("inlineCode",{parentName:"p"},"Select.Modal")," which contains the select menu content. Use ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.List")," to wrap items in the select menu, and ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Item")," to wrap each item."),Object(a.b)("p",null,"Several additional components exist to provide even more functionality: ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Header"),", ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Filter"),", ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Tabs"),", ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.TabPanel")," ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Footer")," and ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Divider"),"."),Object(a.b)("h2",null,"Basic Example"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h2",null,"SelectMenu"),Object(a.b)("p",null,"Main wrapper component for select menu."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<SelectMenu>\n  {/* all other sub components are wrapped here*/}\n</SelectMenu>\n")),Object(a.b)("h3",null,"System props"),Object(a.b)("p",null,"SelectMenu components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"initialTab"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"String"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"If using the ",Object(a.b)("inlineCode",{parentName:"td"},"SelectMenu.Tabs")," component, you can use this prop to change the tab shown on open. By default, the first tab will be used.")))),Object(a.b)("h2",null,"SelectMenu.MenuContext"),Object(a.b)("p",null,"SelectMenu.MenuContext is a ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/context.html#reactcreatecontext"}),"context object")," that exposes some helpful state values to be used via ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/hooks-reference.html#usecontext"}),Object(a.b)("inlineCode",{parentName:"a"},"React.useContext"))," in consuming applications.  SelectMenu.MenuContext can only be used in components that are already wrapped in a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," as ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," contains the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/context.html#contextprovider"}),"context provider"),"."),Object(a.b)("h3",null,"Values available on MenuContext"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"selectedTab"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"string"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"The currently selected tab")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"setSelectedTab"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"function"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Used to update the currently selected tab state")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"open"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"boolean"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"State for open/closed status of the menu modal")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"setOpen"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"function"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Used to update the ",Object(a.b)("inlineCode",{parentName:"td"},"open")," state")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"initialTab"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"string"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Mostly used internally to pass down which tab should be set to open by default. To change this value use the ",Object(a.b)("inlineCode",{parentName:"td"},"initialTab")," prop on ",Object(a.b)("inlineCode",{parentName:"td"},"SelectMenu"),".")))),Object(a.b)("h3",null,"Example Usage"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"import {SelectMenu, Button} from `@primer/components`\nimport React, {useContext} from 'react'\n\nconst MyMenu = () => {\n  <SelectMenu>\n    <MyButton as=\"summary\" />\n    <SelectMenu.Modal>\n      content\n    </SelectMenu.Modal>\n  </SelectMenu>\n}\n\n// note that we can only use the context in components that are already wrapped by SelectMenu (and thus the Context.Provider)\nconst MyButton = () => {\n  const menuContext = useContext(SelectMenu.MenuContext);\n\n  return (\n    <Button as=\"summary\">{menuContext.open ? 'Open' : 'Closed'}</Button>\n  )\n}\n")),Object(a.b)("h2",null,"SelectMenu.Modal"),Object(a.b)("p",null,"Used to wrap the content in a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<SelectMenu.Modal>\n  {/* all menu content is wrapped in the modal*/}\n</SelectMenu.Menu>\n")),Object(a.b)("h3",null,"Right-aligned modal"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"align='right'")," prop to align the modal to the right. Note that this only modifies alignment for the modal, and not the SelectMenu itself. You will need to wrap the SelectMenu in a relatively positioned element for this to work properly."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<Relative display="flex" justifyContent="flex-end">\n  <SelectMenu>\n    <Button as="summary">Projects</Button>\n    <SelectMenu.Modal align="right">\n      <SelectMenu.Header>Projects</SelectMenu.Header>\n      <SelectMenu.List>\n        <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n        <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n        <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n        <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n      </SelectMenu.List>\n    </SelectMenu.Modal>\n  </SelectMenu>\n</Relative>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Modal components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Prop name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"align"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"String"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"'left'"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:null}),"Use ",Object(a.b)("inlineCode",{parentName:"td"},"right")," to align the select menu to the right")))),Object(a.b)("h2",null,"SelectMenu.List"),Object(a.b)("p",null,"Used to wrap the select menu list content.  All menu items ",Object(a.b)("strong",{parentName:"p"},"must")," be wrapped in a SelectMenu.List in order for the accessbility keyboard handling to function properly. If you are using the ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.TabPanel")," you do not need to provide a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.List")," as that component renders a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.List")," as a wrapper."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<SelectMenu.List>\n  {/* all menu  list items are wrapped in the list*/}\n</SelectMenu.List>\n")),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.List components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.List components do not get any additional props besides system props."),Object(a.b)("h2",null,"SelectMenu.Item"),Object(a.b)("p",null,"Individual items in a select menu. SelectMenu.Item renders an anchor tag by default, you'll need to make sure to provide the appropriate ",Object(a.b)("inlineCode",{parentName:"p"},"href"),". "),Object(a.b)("p",null,"You can use a ",Object(a.b)("inlineCode",{parentName:"p"},"button")," tag instead by utilizing the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/core-concepts#the-as-prop"}),Object(a.b)("inlineCode",{parentName:"a"},"as")," prop"),". Be sure to consider ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://marcysutton.com/links-vs-buttons-in-modern-web-applications"}),"which HTML element is the right choice")," for your usage of the component. "),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<SelectMenu.Item href="/link/to/thing" selected={true}>\n  {/* wraps an individual list item*/}\n</SelectMenu.Item>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Item components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"selected"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"boolean"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Used to apply styles to the selected items in the list.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"onClick"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"function"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Function called when item is clicked. By default we also close the menu when items are clicked. If you would like the menu to stay open, pass an ",Object(a.b)("inlineCode",{parentName:"td"},"e.preventDefault()")," to your onClick handler.")))),Object(a.b)("h2",null,"SelectMenu.Filter"),Object(a.b)("p",null,"Use a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Filter")," to add a filter UI to your select menu. Users are expected to implement their own filtering and manage the state of the ",Object(a.b)("inlineCode",{parentName:"p"},"value")," prop on the input. This gives users more flexibility over the type of filtering and type of content passed into each select menu item."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Filter by Project</SelectMenu.Header>\n    <SelectMenu.Filter placeholder="Filter projects" value="" aria-label="Filter Projects"/>\n    <SelectMenu.List>\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Filter components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.Filter components receive all the props that the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/TextInput"}),"TextInput")," component gets."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"value"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"String"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Users of this component must provide a value for the filter input that is managed in the consuming application")))),Object(a.b)("h2",null,"SelectMenu.Tabs"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Tabs")," to wrap the the tab navigation and ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Tab")," for each tab in the navigation."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.TabPanel")," should wrap each corresponding panel for each of the tabs. The ",Object(a.b)("inlineCode",{parentName:"p"},"tabName")," prop for each ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.TabPanel")," must match the name provided in the ",Object(a.b)("inlineCode",{parentName:"p"},"tabName")," prop on ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Tab"),"."),Object(a.b)("p",null,"To set one of the tabs to be open by default, use ",Object(a.b)("inlineCode",{parentName:"p"},"initialTab")," on the main ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," component. Otherwise, the first tab will be shown by default."),Object(a.b)("p",null,"Each ",Object(a.b)("inlineCode",{parentName:"p"},"Select.Menu")," tab will need to have an ",Object(a.b)("inlineCode",{parentName:"p"},"index")," prop. The first tab should be at index ",Object(a.b)("inlineCode",{parentName:"p"},"0"),", the second at index ",Object(a.b)("inlineCode",{parentName:"p"},"1")," and so forth. The ",Object(a.b)("inlineCode",{parentName:"p"},"index")," prop is used to show the first tab by default."),Object(a.b)("p",null,"If you need access to the selected tab state, you can find it in the MenuContext object exported from ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu")," as ",Object(a.b)("inlineCode",{parentName:"p"},"MenuContext.selectedTab"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.Tabs>\n      <SelectMenu.Tab index={0} tabName="Repository"/>\n      <SelectMenu.Tab index={1} tabName="Organization"/>\n    </SelectMenu.Tabs>\n    <SelectMenu.TabPanel tabName="Repository">\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.TabPanel tabName="Organization">\n      <SelectMenu.Item href="#"> Project 2</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.Footer>Showing 3 of 3</SelectMenu.Footer>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Tabs components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.Tabs components do not get any additional props besides system props."),Object(a.b)("h2",null,"SelectMenu.Tab"),Object(a.b)("p",null,"Used for each individual tab inside of a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Tabs"),". Be sure to set the ",Object(a.b)("inlineCode",{parentName:"p"},"index")," prop to correspond to the order the tab is in. The ",Object(a.b)("inlineCode",{parentName:"p"},"tabName")," prop should correspond to the ",Object(a.b)("inlineCode",{parentName:"p"},"tabName")," set on the ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.TabPanel"),"."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"onClick")," prop is optional and can be used for any events or data fetching you might need to trigger on tab clicks."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<SelectMenu.Tab index={0} tabName="Repository"/>\n<SelectMenu.Tab index={1} tabName="Organization"/>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Tab components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"tabName"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"String"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Used to identify the corresponding tab. Must match the string used in the ",Object(a.b)("inlineCode",{parentName:"td"},"tabs")," array in the ",Object(a.b)("inlineCode",{parentName:"td"},"SelectMenu.Tabs")," component.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"index"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Number"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"The index at which the tab is in the list of tabs")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"onClick"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Function"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Function to be called when the tab is clicked. Optional.")))),Object(a.b)("h2",null,"SelectMenu.TabPanel"),Object(a.b)("p",null,"Wraps the content for each tab. Make sure to use the ",Object(a.b)("inlineCode",{parentName:"p"},"tabName")," prop to identify each tab panel with the correct tab in the tab navigation."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note"),": SelectMenu.TabPanel wraps content in a SelectMenu.List, so adding a SelectMenu.List manually is not necessary."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<SelectMenu.TabPanel tabName="Repository">\n  {/* Wraps content for each tab */}\n</SelectMenu.TabPanel>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.TabPanel components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Name"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Type"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"center"}),"Default"),Object(a.b)("th",Object.assign({parentName:"tr"},{align:"left"}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"tabName"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"String"),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"center"})),Object(a.b)("td",Object.assign({parentName:"tr"},{align:"left"}),"Used to identify the corresponding tab. Must match the string used in the ",Object(a.b)("inlineCode",{parentName:"td"},"tabs")," array in the ",Object(a.b)("inlineCode",{parentName:"td"},"SelectMenu.Tabs")," component.")))),Object(a.b)("h2",null,"SelectMenu.Divider"),Object(a.b)("p",null,"Use a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Divider")," to add information between items in a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.List"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Divder components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.Divider components do not get any additional props besides system props."),Object(a.b)("h2",null,"SelectMenu.Footer"),Object(a.b)("p",null,"Use a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Footer")," to add content to the bottom of the select menu."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Footer components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.Footer components do not get any additional props besides system props."),Object(a.b)("h2",null,"SelectMenu.Header"),Object(a.b)("p",null,"Use a ",Object(a.b)("inlineCode",{parentName:"p"},"SelectMenu.Header")," to add a header to the top of the select menu content."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'<SelectMenu>\n  <Button as="summary">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href="#">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href="#">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href="#"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href="#">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n')),Object(a.b)("h3",null,"System Props"),Object(a.b)("p",null,"SelectMenu.Header components get ",Object(a.b)("inlineCode",{parentName:"p"},"COMMON")," system props. Read our ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/components/staging/emily/testing3lol/system-props"}),"System Props")," doc page for a full list of available props."),Object(a.b)("h3",null,"Component Props"),Object(a.b)("p",null,"SelectMenu.Header components do not get any additional props besides system props."))}b.isMDXComponent=!0},NC8T:function(e,t,n){"use strict";var a=n("UutA"),l=n("oXiK"),c=n("aOgs"),r=n("q1tI"),o=n.n(r),b=n("8gyx"),s=n("VhsB"),i=n("nkI/"),p=n("bWhc"),m=n("og4h"),u=n("sqpL"),d=Object(a.f)(l.Box).withConfig({displayName:"table-of-contents___StyledBox",componentId:"sc-4czghc-0"})({listStyle:"none"});function j(e){var t=e.items,n=e.depth;return o.a.createElement(d,{as:"ul",m:0,p:0},t.map((function(e){return o.a.createElement(l.Box,{as:"li",key:e.url,pl:n>0?3:0},o.a.createElement(l.Link,{display:"inline-block",py:1,href:e.url,color:"gray.6"},e.title),e.items?o.a.createElement(j,{items:e.items,depth:n+1}):null)})))}j.defaultProps={depth:0};var O=j,g=Object(a.f)(l.Flex).withConfig({displayName:"layout___StyledFlex",componentId:"sc-15zk0ku-0"})({zIndex:0}),h=Object(a.f)(l.Grid).withConfig({displayName:"layout___StyledGrid",componentId:"sc-15zk0ku-1"})({alignItems:"start",alignSelf:"start"}),M=Object(a.f)(l.BorderBox).withConfig({displayName:"layout___StyledBorderBox",componentId:"sc-15zk0ku-2"})({gridArea:"heading"}),f=Object(a.f)(l.Position).withConfig({displayName:"layout___StyledPosition",componentId:"sc-15zk0ku-3"})({gridArea:"table-of-contents",overflow:"auto"}),N=Object(a.f)(l.Box).withConfig({displayName:"layout___StyledBox",componentId:"sc-15zk0ku-4"})({gridArea:"content"});t.a=function(e){var t=e.children,n=e.pageContext,a=n.frontmatter,r=a.title,d=a.description,j=a.status,S=a.source,y=a.additionalContributors,C=void 0===y?[]:y;return o.a.createElement(l.Flex,{flexDirection:"column",minHeight:"100vh"},o.a.createElement(b.a,{title:r,description:d}),o.a.createElement(s.b,null),o.a.createElement(g,{flex:"1 1 auto",flexDirection:"row"},o.a.createElement(l.Box,{display:["none",null,null,"block"]},o.a.createElement(p.a,null)),o.a.createElement(h,{id:"skip-nav",maxWidth:"100%",gridTemplateColumns:["100%",null,"minmax(0, 65ch) 220px"],gridTemplateAreas:['"heading" "content"',null,'"heading ." "content table-of-contents"'],gridColumnGap:[null,null,6,7],gridRowGap:3,mx:"auto",p:[5,6,null,7]},o.a.createElement(M,{borderWidth:0,borderBottomWidth:1,borderRadius:0,pb:2},o.a.createElement(l.Heading,null,r)),n.tableOfContents.items?o.a.createElement(f,{display:["none",null,"block"],position:"sticky",top:s.a+24,maxHeight:"calc(100vh - "+s.a+"px - 24px)"},o.a.createElement(l.Text,{display:"inline-block",fontWeight:"bold",mb:1},"Table of contents"),o.a.createElement(O,{items:n.tableOfContents.items})):null,o.a.createElement(N,null,j||S?o.a.createElement(l.Flex,{mb:3,alignItems:"center"},j?o.a.createElement(u.a,{status:j}):null,o.a.createElement(l.Box,{mx:"auto"}),S?o.a.createElement(m.a,{href:S}):null):null,n.tableOfContents.items?o.a.createElement(l.Box,{display:["block",null,"none"],mb:3},o.a.createElement(l.Details,null,(function(e){var t=e.open;return o.a.createElement(o.a.Fragment,null,o.a.createElement(l.Text,{as:"summary",fontWeight:"bold"},o.a.createElement(l.StyledOcticon,{icon:t?c.b:c.c,mr:2}),"Table of contents"),o.a.createElement(l.Box,{pt:1},o.a.createElement(O,{items:n.tableOfContents.items})))}))):null,t,o.a.createElement(i.a,{editUrl:n.editUrl,contributors:n.contributors.concat(C.map((function(e){return{login:e}})))})))))}}}]);
//# sourceMappingURL=component---content-select-menu-md-b5bfad6e05d8ef24cdbe.js.map