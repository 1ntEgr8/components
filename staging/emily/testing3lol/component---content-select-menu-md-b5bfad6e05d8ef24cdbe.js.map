{"version":3,"sources":["webpack:///./content/SelectMenu.md","webpack:///./node_modules/@primer/gatsby-theme-doctocat/src/components/table-of-contents.js","webpack:///./src/@primer/gatsby-theme-doctocat/components/layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","listStyle","TableOfContents","items","depth","as","m","p","map","item","key","url","pl","display","py","href","color","title","defaultProps","zIndex","alignItems","alignSelf","gridArea","overflow","Layout","children","pageContext","frontmatter","description","status","source","additionalContributors","flexDirection","minHeight","flex","id","maxWidth","gridTemplateColumns","gridTemplateAreas","gridColumnGap","gridRowGap","mx","borderWidth","borderBottomWidth","borderRadius","pb","tableOfContents","position","top","HEADER_HEIGHT","maxHeight","fontWeight","mb","open","icon","ChevronDown","ChevronRight","mr","pt","editUrl","contributors","concat","login"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,iMAAmQ,0BAAYA,WAAW,KAAvB,cAAnQ,8BAAwV,0BAAYA,WAAW,KAAvB,WAAxV,mCAA+a,0BAAYA,WAAW,KAAvB,gBAA/a,gDAAwhB,0BAAYA,WAAW,KAAvB,mBAAxhB,0CAA8nB,0BAAYA,WAAW,KAAvB,mBAA9nB,uBACA,gGAA+E,0BAAYA,WAAW,KAAvB,qBAA/E,KAAkJ,0BAAYA,WAAW,KAAvB,qBAAlJ,KAAqN,0BAAYA,WAAW,KAAvB,mBAArN,KAAsR,0BAAYA,WAAW,KAAvB,uBAAtR,IAA0V,0BAAYA,WAAW,KAAvB,qBAA1V,QAAga,0BAAYA,WAAW,KAAvB,sBAAha,KACA,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,+eAiBL,oCACA,gEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sFAML,sCACA,kDAAiC,0BAAYA,WAAW,KAAvB,UAAjC,2BAA+G,+BAAGA,WAAW,KAAQ,CACjI,KAAQ,uDADmG,gBAA/G,iDAGA,yCACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,gBAEoB,0BAAYA,WAAW,MAAvB,mBAFpB,iHAMN,gDACA,oDAAmC,+BAAGA,WAAW,KAAQ,CACrD,KAAQ,6DADuB,kBAAnC,0DAEsF,+BAAGA,WAAW,KAAQ,CACxG,KAAQ,6DACP,0BAAYA,WAAW,KAAvB,qBAJL,oHAI0L,0BAAYA,WAAW,KAAvB,cAJ1L,OAIwP,0BAAYA,WAAW,KAAvB,cAJxP,iBAIgU,+BAAGA,WAAW,KAAQ,CAClV,KAAQ,0DADoT,oBAJhU,KAOA,yDACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,eAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,+BAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,kBAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,oDAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,mDAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,sBAE0B,0BAAYA,WAAW,MAAvB,QAF1B,WAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,cAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,gHAEoH,0BAAYA,WAAW,MAAvB,cAFpH,YAEwL,0BAAYA,WAAW,MAAvB,cAFxL,QAMN,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4jBAuBL,0CACA,sDAAqC,0BAAYA,WAAW,KAAvB,cAArC,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gGAML,6CACA,gCAAe,0BAAYA,WAAW,KAAvB,iBAAf,kOACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,ulBAmBL,sCACA,wDAAuC,0BAAYA,WAAW,KAAvB,UAAvC,2BAAqH,+BAAGA,WAAW,KAAQ,CACvI,KAAQ,uDADyG,gBAArH,iDAGA,yCACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,aAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,OADX,OAEW,0BAAYA,WAAW,MAAvB,SAFX,6CAMN,yCACA,mFAAkE,sBAAQA,WAAW,KAAnB,QAAlE,+HAA0O,0BAAYA,WAAW,KAAvB,uBAA1O,iCAA2U,0BAAYA,WAAW,KAAvB,mBAA3U,gCAAua,0BAAYA,WAAW,KAAvB,mBAAva,kBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mGAML,sCACA,uDAAsC,0BAAYA,WAAW,KAAvB,UAAtC,2BAAoH,+BAAGA,WAAW,KAAQ,CACtI,KAAQ,uDADwG,gBAApH,iDAGA,yCACA,yGACA,yCACA,iKAAgJ,0BAAYA,WAAW,KAAvB,QAAhJ,MACA,sCAAqB,0BAAYA,WAAW,KAAvB,UAArB,iCAAyG,+BAAGA,WAAW,KAAQ,CAC3H,KAAQ,oEACP,0BAAYA,WAAW,KAAvB,MAFoG,SAAzG,yBAE0F,+BAAGA,WAAW,KAAQ,CAC5G,KAAQ,wEAD8E,0CAF1F,sCAKA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0HAML,sCACA,uDAAsC,0BAAYA,WAAW,KAAvB,UAAtC,2BAAoH,+BAAGA,WAAW,KAAQ,CACtI,KAAQ,uDADwG,gBAApH,iDAGA,yCACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,4DAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,oJAEwJ,0BAAYA,WAAW,MAAvB,sBAFxJ,gCAMN,2CACA,8BAAa,0BAAYA,WAAW,KAAvB,qBAAb,4HAAuM,0BAAYA,WAAW,KAAvB,SAAvM,2IACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,mpBAmBL,sCACA,yDAAwC,0BAAYA,WAAW,KAAvB,UAAxC,2BAAsH,+BAAGA,WAAW,KAAQ,CACxI,KAAQ,uDAD0G,gBAAtH,iDAGA,yCACA,oFAAmE,+BAAGA,WAAW,KAAQ,CACrF,KAAQ,oDADuD,aAAnE,oBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,qHAMN,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,mBAAX,uCAA8G,0BAAYA,WAAW,KAAvB,kBAA9G,oCACA,qBAAG,0BAAYA,WAAW,KAAvB,uBAAH,mEAAsI,0BAAYA,WAAW,KAAvB,WAAtI,kBAA4M,0BAAYA,WAAW,KAAvB,uBAA5M,wCAAoT,0BAAYA,WAAW,KAAvB,WAApT,YAAoX,0BAAYA,WAAW,KAAvB,kBAApX,KACA,0EAAyD,0BAAYA,WAAW,KAAvB,cAAzD,gBAAgI,0BAAYA,WAAW,KAAvB,cAAhI,kEACA,6BAAY,0BAAYA,WAAW,KAAvB,eAAZ,6BAAiG,0BAAYA,WAAW,KAAvB,SAAjG,2CAA8L,0BAAYA,WAAW,KAAvB,KAA9L,yBAAqQ,0BAAYA,WAAW,KAAvB,KAArQ,sBAAyU,0BAAYA,WAAW,KAAvB,SAAzU,mDACA,8HAA6G,0BAAYA,WAAW,KAAvB,cAA7G,OAA2K,0BAAYA,WAAW,KAAvB,2BAA3K,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,o3BAyBL,sCACA,uDAAsC,0BAAYA,WAAW,KAAvB,UAAtC,2BAAoH,+BAAGA,WAAW,KAAQ,CACtI,KAAQ,uDADwG,gBAApH,iDAGA,yCACA,yGACA,wCACA,iEAAgD,0BAAYA,WAAW,KAAvB,mBAAhD,wBAAoI,0BAAYA,WAAW,KAAvB,SAApI,uDAA6O,0BAAYA,WAAW,KAAvB,WAA7O,kCAAmU,0BAAYA,WAAW,KAAvB,WAAnU,eAAsY,0BAAYA,WAAW,KAAvB,uBAAtY,KACA,4BAAW,0BAAYA,WAAW,KAAvB,WAAX,8GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2GAKL,sCACA,sDAAqC,0BAAYA,WAAW,KAAvB,UAArC,2BAAmH,+BAAGA,WAAW,KAAQ,CACrI,KAAQ,uDADuG,gBAAnH,iDAGA,yCACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,6EAEiF,0BAAYA,WAAW,MAAvB,QAFjF,iBAEoJ,0BAAYA,WAAW,MAAvB,mBAFpJ,gBAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,SAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,sDAIF,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,YAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,+DAMN,6CACA,6EAA4D,0BAAYA,WAAW,KAAvB,WAA5D,gFACA,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,oHACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+GAML,sCACA,2DAA0C,0BAAYA,WAAW,KAAvB,UAA1C,2BAAwH,+BAAGA,WAAW,KAAQ,CAC1I,KAAQ,uDAD4G,gBAAxH,iDAGA,yCACA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,QAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,WADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,WAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,UAGA,gCAAIA,WAAW,MAAS,CACtB,MAAS,YAEX,gCAAIA,WAAW,MAAS,CACtB,MAAS,SADX,6EAEiF,0BAAYA,WAAW,MAAvB,QAFjF,iBAEoJ,0BAAYA,WAAW,MAAvB,mBAFpJ,kBAMN,4CACA,8BAAa,0BAAYA,WAAW,KAAvB,sBAAb,0CAAsH,0BAAYA,WAAW,KAAvB,mBAAtH,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,4iBAkBL,sCACA,yDAAwC,0BAAYA,WAAW,KAAvB,UAAxC,2BAAsH,+BAAGA,WAAW,KAAQ,CACxI,KAAQ,uDAD0G,gBAAtH,iDAGA,yCACA,4GACA,2CACA,8BAAa,0BAAYA,WAAW,KAAvB,qBAAb,qDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,qkBAkBL,sCACA,yDAAwC,0BAAYA,WAAW,KAAvB,UAAxC,2BAAsH,+BAAGA,WAAW,KAAQ,CACxI,KAAQ,uDAD0G,gBAAtH,iDAGA,yCACA,2GACA,2CACA,8BAAa,0BAAYA,WAAW,KAAvB,qBAAb,2DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,qkBAkBL,sCACA,yDAAwC,0BAAYA,WAAW,KAAvB,UAAxC,2BAAsH,+BAAGA,WAAW,KAAQ,CACxI,KAAQ,uDAD0G,gBAAtH,iDAGA,yCACA,4GAKJJ,EAAWK,gBAAiB,G,gRCpoBM,CAACC,UAAW,SAF9C,SAASC,EAAT,GAA0C,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC/B,OACE,qBAAKC,GAAG,KAAKC,EAAG,EAAGC,EAAG,GACnBJ,EAAMK,KAAI,SAAAC,GAAI,OACb,kBAAC,MAAD,CAAKJ,GAAG,KAAKK,IAAKD,EAAKE,IAAKC,GAAIR,EAAQ,EAAI,EAAI,GAC9C,kBAAC,OAAD,CAAMS,QAAQ,eAAeC,GAAI,EAAGC,KAAMN,EAAKE,IAAKK,MAAM,UACvDP,EAAKQ,OAEPR,EAAKN,MACJ,kBAACD,EAAD,CAAiBC,MAAOM,EAAKN,MAAOC,MAAOA,EAAQ,IACjD,UAOdF,EAAgBgB,aAAe,CAC7Bd,MAAO,GAGMF,Q,iGCNsC,CAACiB,OAAQ,I,iGAa/C,CAACC,WAAY,QAASC,UAAW,U,2GAEtB,CAACC,SAAU,Y,yGAMlB,CAACA,SAAU,oBAAqBC,SAAU,S,+FAWzC,CAACD,SAAU,YAqChBE,IA5Ef,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,YAAc,EACmCA,EAAYC,YAA/EV,EADgC,EAChCA,MAAOW,EADyB,EACzBA,YAAaC,EADY,EACZA,OAAQC,EADI,EACJA,OADI,IACIC,8BADJ,MAC6B,GAD7B,EAGvC,OACE,kBAAC,OAAD,CAAMC,cAAc,SAASC,UAAU,SACrC,kBAAC,IAAD,CAAMhB,MAAOA,EAAOW,YAAaA,IACjC,kBAAC,IAAD,MACA,qBAAMM,KAAK,WAAWF,cAAc,OAClC,kBAAC,MAAD,CAAKnB,QAAS,CAAC,OAAQ,KAAM,KAAM,UACjC,kBAAC,IAAD,OAEF,qBACEsB,GAAG,WACHC,SAAS,OACTC,oBAAqB,CAAC,OAAQ,KAAM,yBACpCC,kBAAmB,CAAC,sBAAuB,KAAM,2CACjDC,cAAe,CAAC,KAAM,KAAM,EAAG,GAC/BC,WAAY,EACZC,GAAG,OACHlC,EAAG,CAAC,EAAG,EAAG,KAAM,IAGhB,qBAAuCmC,YAAa,EAAGC,kBAAmB,EAAGC,aAAc,EAAGC,GAAI,GAChG,kBAAC,UAAD,KAAU5B,IAEXS,EAAYoB,gBAAgB3C,MAC3B,qBACEU,QAAS,CAAC,OAAQ,KAAM,SAExBkC,SAAS,SACTC,IAAKC,IAAgB,GACrBC,UAAS,gBAAkBD,IAAlB,cAET,kBAAC,OAAD,CAAMpC,QAAQ,eAAesC,WAAW,OAAOC,GAAI,GAAnD,qBAGA,kBAAC,EAAD,CAAiBjD,MAAOuB,EAAYoB,gBAAgB3C,SAEpD,KACJ,yBACG0B,GAAUC,EACT,kBAAC,OAAD,CAAMsB,GAAI,EAAGhC,WAAW,UACrBS,EAAS,kBAAC,IAAD,CAAaA,OAAQA,IAAa,KAC5C,kBAAC,MAAD,CAAKY,GAAG,SACPX,EAAS,kBAAC,IAAD,CAAYf,KAAMe,IAAa,MAEzC,KACHJ,EAAYoB,gBAAgB3C,MAC3B,kBAAC,MAAD,CAAKU,QAAS,CAAC,QAAS,KAAM,QAASuC,GAAI,GACzC,kBAAC,UAAD,MACG,gBAAEC,EAAF,EAAEA,KAAF,OACC,oCACE,kBAAC,OAAD,CAAMhD,GAAG,UAAU8C,WAAW,QAC5B,kBAAC,gBAAD,CAAeG,KAAMD,EAAOE,IAAcC,IAAcC,GAAI,IAD9D,qBAIA,kBAAC,MAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CAAiBvD,MAAOuB,EAAYoB,gBAAgB3C,cAM5D,KACHsB,EACD,kBAAC,IAAD,CACEkC,QAASjC,EAAYiC,QACrBC,aAAclC,EAAYkC,aAAaC,OAAO9B,EAAuBvB,KAAI,SAAAsD,GAAK,MAAK,CAACA","file":"component---content-select-menu-md-b5bfad6e05d8ef24cdbe.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/components/components/docs/node_modules/@primer/gatsby-theme-doctocat/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` components are a suite of components which can be combined together to make several different variations of our GitHub select menu. At it's most basic form, a select menu is comprised of a `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` wrapper, which contains a `}<inlineCode parentName=\"p\">{`summary`}</inlineCode>{` component of your choice and a `}<inlineCode parentName=\"p\">{`Select.Modal`}</inlineCode>{` which contains the select menu content. Use `}<inlineCode parentName=\"p\">{`SelectMenu.List`}</inlineCode>{` to wrap items in the select menu, and `}<inlineCode parentName=\"p\">{`SelectMenu.Item`}</inlineCode>{` to wrap each item.`}</p>\n    <p>{`Several additional components exist to provide even more functionality: `}<inlineCode parentName=\"p\">{`SelectMenu.Header`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`SelectMenu.Filter`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`SelectMenu.Tabs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`SelectMenu.TabPanel`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`SelectMenu.Footer`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SelectMenu.Divider`}</inlineCode>{`.`}</p>\n    <h2>{`Basic Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h2>{`SelectMenu`}</h2>\n    <p>{`Main wrapper component for select menu.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu>\n  {/* all other sub components are wrapped here*/}\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System props`}</h3>\n    <p>{`SelectMenu components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`initialTab`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`If using the `}<inlineCode parentName=\"td\">{`SelectMenu.Tabs`}</inlineCode>{` component, you can use this prop to change the tab shown on open. By default, the first tab will be used.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.MenuContext`}</h2>\n    <p>{`SelectMenu.MenuContext is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html#reactcreatecontext\"\n      }}>{`context object`}</a>{` that exposes some helpful state values to be used via `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html#usecontext\"\n      }}><inlineCode parentName=\"a\">{`React.useContext`}</inlineCode></a>{` in consuming applications.  SelectMenu.MenuContext can only be used in components that are already wrapped in a `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` contains the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html#contextprovider\"\n      }}>{`context provider`}</a>{`.`}</p>\n    <h3>{`Values available on MenuContext`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`selectedTab`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The currently selected tab`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`setSelectedTab`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Used to update the currently selected tab state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`open`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`State for open/closed status of the menu modal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`setOpen`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Used to update the `}<inlineCode parentName=\"td\">{`open`}</inlineCode>{` state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`initialTab`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Mostly used internally to pass down which tab should be set to open by default. To change this value use the `}<inlineCode parentName=\"td\">{`initialTab`}</inlineCode>{` prop on `}<inlineCode parentName=\"td\">{`SelectMenu`}</inlineCode>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>{`Example Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {SelectMenu, Button} from \\`@primer/components\\`\nimport React, {useContext} from 'react'\n\nconst MyMenu = () => {\n  <SelectMenu>\n    <MyButton as=\"summary\" />\n    <SelectMenu.Modal>\n      content\n    </SelectMenu.Modal>\n  </SelectMenu>\n}\n\n// note that we can only use the context in components that are already wrapped by SelectMenu (and thus the Context.Provider)\nconst MyButton = () => {\n  const menuContext = useContext(SelectMenu.MenuContext);\n\n  return (\n    <Button as=\"summary\">{menuContext.open ? 'Open' : 'Closed'}</Button>\n  )\n}\n`}</code></pre>\n    <h2>{`SelectMenu.Modal`}</h2>\n    <p>{`Used to wrap the content in a `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu.Modal>\n  {/* all menu content is wrapped in the modal*/}\n</SelectMenu.Menu>\n`}</code></pre>\n    <h3>{`Right-aligned modal`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`align='right'`}</inlineCode>{` prop to align the modal to the right. Note that this only modifies alignment for the modal, and not the SelectMenu itself. You will need to wrap the SelectMenu in a relatively positioned element for this to work properly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Relative display=\"flex\" justifyContent=\"flex-end\">\n  <SelectMenu>\n    <Button as=\"summary\">Projects</Button>\n    <SelectMenu.Modal align=\"right\">\n      <SelectMenu.Header>Projects</SelectMenu.Header>\n      <SelectMenu.List>\n        <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n        <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      </SelectMenu.List>\n    </SelectMenu.Modal>\n  </SelectMenu>\n</Relative>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Modal components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Prop name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`align`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`'left'`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use `}<inlineCode parentName=\"td\">{`right`}</inlineCode>{` to align the select menu to the right`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.List`}</h2>\n    <p>{`Used to wrap the select menu list content.  All menu items `}<strong parentName=\"p\">{`must`}</strong>{` be wrapped in a SelectMenu.List in order for the accessbility keyboard handling to function properly. If you are using the `}<inlineCode parentName=\"p\">{`SelectMenu.TabPanel`}</inlineCode>{` you do not need to provide a `}<inlineCode parentName=\"p\">{`SelectMenu.List`}</inlineCode>{` as that component renders a `}<inlineCode parentName=\"p\">{`SelectMenu.List`}</inlineCode>{` as a wrapper.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu.List>\n  {/* all menu  list items are wrapped in the list*/}\n</SelectMenu.List>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.List components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.List components do not get any additional props besides system props.`}</p>\n    <h2>{`SelectMenu.Item`}</h2>\n    <p>{`Individual items in a select menu. SelectMenu.Item renders an anchor tag by default, you'll need to make sure to provide the appropriate `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{`. `}</p>\n    <p>{`You can use a `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` tag instead by utilizing the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/core-concepts#the-as-prop\"\n      }}><inlineCode parentName=\"a\">{`as`}</inlineCode>{` prop`}</a>{`. Be sure to consider `}<a parentName=\"p\" {...{\n        \"href\": \"https://marcysutton.com/links-vs-buttons-in-modern-web-applications\"\n      }}>{`which HTML element is the right choice`}</a>{` for your usage of the component. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu.Item href=\"/link/to/thing\" selected={true}>\n  {/* wraps an individual list item*/}\n</SelectMenu.Item>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Item components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`selected`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Used to apply styles to the selected items in the list.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`onClick`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function called when item is clicked. By default we also close the menu when items are clicked. If you would like the menu to stay open, pass an `}<inlineCode parentName=\"td\">{`e.preventDefault()`}</inlineCode>{` to your onClick handler.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.Filter`}</h2>\n    <p>{`Use a `}<inlineCode parentName=\"p\">{`SelectMenu.Filter`}</inlineCode>{` to add a filter UI to your select menu. Users are expected to implement their own filtering and manage the state of the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop on the input. This gives users more flexibility over the type of filtering and type of content passed into each select menu item.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Filter by Project</SelectMenu.Header>\n    <SelectMenu.Filter placeholder=\"Filter projects\" value=\"\" aria-label=\"Filter Projects\"/>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Filter components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.Filter components receive all the props that the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/TextInput\"\n      }}>{`TextInput`}</a>{` component gets.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Users of this component must provide a value for the filter input that is managed in the consuming application`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.Tabs`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`SelectMenu.Tabs`}</inlineCode>{` to wrap the the tab navigation and `}<inlineCode parentName=\"p\">{`SelectMenu.Tab`}</inlineCode>{` for each tab in the navigation.`}</p>\n    <p><inlineCode parentName=\"p\">{`SelectMenu.TabPanel`}</inlineCode>{` should wrap each corresponding panel for each of the tabs. The `}<inlineCode parentName=\"p\">{`tabName`}</inlineCode>{` prop for each `}<inlineCode parentName=\"p\">{`SelectMenu.TabPanel`}</inlineCode>{` must match the name provided in the `}<inlineCode parentName=\"p\">{`tabName`}</inlineCode>{` prop on `}<inlineCode parentName=\"p\">{`SelectMenu.Tab`}</inlineCode>{`.`}</p>\n    <p>{`To set one of the tabs to be open by default, use `}<inlineCode parentName=\"p\">{`initialTab`}</inlineCode>{` on the main `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` component. Otherwise, the first tab will be shown by default.`}</p>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`Select.Menu`}</inlineCode>{` tab will need to have an `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop. The first tab should be at index `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, the second at index `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and so forth. The `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop is used to show the first tab by default.`}</p>\n    <p>{`If you need access to the selected tab state, you can find it in the MenuContext object exported from `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`MenuContext.selectedTab`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.Tabs>\n      <SelectMenu.Tab index={0} tabName=\"Repository\"/>\n      <SelectMenu.Tab index={1} tabName=\"Organization\"/>\n    </SelectMenu.Tabs>\n    <SelectMenu.TabPanel tabName=\"Repository\">\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.TabPanel tabName=\"Organization\">\n      <SelectMenu.Item href=\"#\"> Project 2</SelectMenu.Item>\n    </SelectMenu.TabPanel>\n    <SelectMenu.Footer>Showing 3 of 3</SelectMenu.Footer>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Tabs components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.Tabs components do not get any additional props besides system props.`}</p>\n    <h2>{`SelectMenu.Tab`}</h2>\n    <p>{`Used for each individual tab inside of a `}<inlineCode parentName=\"p\">{`SelectMenu.Tabs`}</inlineCode>{`. Be sure to set the `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` prop to correspond to the order the tab is in. The `}<inlineCode parentName=\"p\">{`tabName`}</inlineCode>{` prop should correspond to the `}<inlineCode parentName=\"p\">{`tabName`}</inlineCode>{` set on the `}<inlineCode parentName=\"p\">{`SelectMenu.TabPanel`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` prop is optional and can be used for any events or data fetching you might need to trigger on tab clicks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu.Tab index={0} tabName=\"Repository\"/>\n<SelectMenu.Tab index={1} tabName=\"Organization\"/>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Tab components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tabName`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Used to identify the corresponding tab. Must match the string used in the `}<inlineCode parentName=\"td\">{`tabs`}</inlineCode>{` array in the `}<inlineCode parentName=\"td\">{`SelectMenu.Tabs`}</inlineCode>{` component.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`The index at which the tab is in the list of tabs`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`onClick`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function to be called when the tab is clicked. Optional.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.TabPanel`}</h2>\n    <p>{`Wraps the content for each tab. Make sure to use the `}<inlineCode parentName=\"p\">{`tabName`}</inlineCode>{` prop to identify each tab panel with the correct tab in the tab navigation.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: SelectMenu.TabPanel wraps content in a SelectMenu.List, so adding a SelectMenu.List manually is not necessary.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu.TabPanel tabName=\"Repository\">\n  {/* Wraps content for each tab */}\n</SelectMenu.TabPanel>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.TabPanel components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`tabName`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Used to identify the corresponding tab. Must match the string used in the `}<inlineCode parentName=\"td\">{`tabs`}</inlineCode>{` array in the `}<inlineCode parentName=\"td\">{`SelectMenu.Tabs`}</inlineCode>{` component.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`SelectMenu.Divider`}</h2>\n    <p>{`Use a `}<inlineCode parentName=\"p\">{`SelectMenu.Divider`}</inlineCode>{` to add information between items in a `}<inlineCode parentName=\"p\">{`SelectMenu.List`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Divider>More Options</SelectMenu.Divider>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Divder components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.Divider components do not get any additional props besides system props.`}</p>\n    <h2>{`SelectMenu.Footer`}</h2>\n    <p>{`Use a `}<inlineCode parentName=\"p\">{`SelectMenu.Footer`}</inlineCode>{` to add content to the bottom of the select menu.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Footer components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.Footer components do not get any additional props besides system props.`}</p>\n    <h2>{`SelectMenu.Header`}</h2>\n    <p>{`Use a `}<inlineCode parentName=\"p\">{`SelectMenu.Header`}</inlineCode>{` to add a header to the top of the select menu content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<SelectMenu>\n  <Button as=\"summary\">Projects</Button>\n  <SelectMenu.Modal>\n    <SelectMenu.Header>Projects</SelectMenu.Header>\n    <SelectMenu.List>\n      <SelectMenu.Item href=\"#\">Primer Components bugs</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Primer Components roadmap</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\"> Project 3</SelectMenu.Item>\n      <SelectMenu.Item href=\"#\">Project 4</SelectMenu.Item>\n      <SelectMenu.Footer>Use ⌥ + click/return to exclude labels.</SelectMenu.Footer>\n    </SelectMenu.List>\n  </SelectMenu.Modal>\n</SelectMenu>\n`}</code></pre>\n    <h3>{`System Props`}</h3>\n    <p>{`SelectMenu.Header components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing3lol/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h3>{`Component Props`}</h3>\n    <p>{`SelectMenu.Header components do not get any additional props besides system props.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import {Box, Link} from '@primer/components'\nimport React from 'react'\n\nfunction TableOfContents({items, depth}) {\n  return (\n    <Box as=\"ul\" m={0} p={0} css={{listStyle: 'none'}}>\n      {items.map(item => (\n        <Box as=\"li\" key={item.url} pl={depth > 0 ? 3 : 0}>\n          <Link display=\"inline-block\" py={1} href={item.url} color=\"gray.6\">\n            {item.title}\n          </Link>\n          {item.items ? (\n            <TableOfContents items={item.items} depth={depth + 1} />\n          ) : null}\n        </Box>\n      ))}\n    </Box>\n  )\n}\n\nTableOfContents.defaultProps = {\n  depth: 0,\n}\n\nexport default TableOfContents\n","import {BorderBox, Box, Flex, Grid, Heading, Position, Text, Details, StyledOcticon} from '@primer/components'\nimport {ChevronDown, ChevronRight} from '@primer/octicons-react'\nimport React from 'react'\nimport Head from '@primer/gatsby-theme-doctocat/src/components/head'\nimport Header, {HEADER_HEIGHT} from '@primer/gatsby-theme-doctocat/src/components/header'\nimport PageFooter from '@primer/gatsby-theme-doctocat/src/components/page-footer'\nimport Sidebar from '@primer/gatsby-theme-doctocat/src/components/sidebar'\nimport SourceLink from '@primer/gatsby-theme-doctocat/src/components/source-link'\nimport StatusLabel from '@primer/gatsby-theme-doctocat/src/components/status-label'\nimport TableOfContents from '@primer/gatsby-theme-doctocat/src/components/table-of-contents'\n\nfunction Layout({children, pageContext}) {\n  const {title, description, status, source, additionalContributors = []} = pageContext.frontmatter\n\n  return (\n    <Flex flexDirection=\"column\" minHeight=\"100vh\">\n      <Head title={title} description={description} />\n      <Header />\n      <Flex flex=\"1 1 auto\" flexDirection=\"row\" css={{zIndex: 0}}>\n        <Box display={['none', null, null, 'block']}>\n          <Sidebar />\n        </Box>\n        <Grid\n          id=\"skip-nav\"\n          maxWidth=\"100%\"\n          gridTemplateColumns={['100%', null, 'minmax(0, 65ch) 220px']}\n          gridTemplateAreas={['\"heading\" \"content\"', null, '\"heading .\" \"content table-of-contents\"']}\n          gridColumnGap={[null, null, 6, 7]}\n          gridRowGap={3}\n          mx=\"auto\"\n          p={[5, 6, null, 7]}\n          css={{alignItems: 'start', alignSelf: 'start'}}\n        >\n          <BorderBox css={{gridArea: 'heading'}} borderWidth={0} borderBottomWidth={1} borderRadius={0} pb={2}>\n            <Heading>{title}</Heading>\n          </BorderBox>\n          {pageContext.tableOfContents.items ? (\n            <Position\n              display={['none', null, 'block']}\n              css={{gridArea: 'table-of-contents', overflow: 'auto'}}\n              position=\"sticky\"\n              top={HEADER_HEIGHT + 24}\n              maxHeight={`calc(100vh - ${HEADER_HEIGHT}px - 24px)`}\n            >\n              <Text display=\"inline-block\" fontWeight=\"bold\" mb={1}>\n                Table of contents\n              </Text>\n              <TableOfContents items={pageContext.tableOfContents.items} />\n            </Position>\n          ) : null}\n          <Box css={{gridArea: 'content'}}>\n            {status || source ? (\n              <Flex mb={3} alignItems=\"center\">\n                {status ? <StatusLabel status={status} /> : null}\n                <Box mx=\"auto\" />\n                {source ? <SourceLink href={source} /> : null}\n              </Flex>\n            ) : null}\n            {pageContext.tableOfContents.items ? (\n              <Box display={['block', null, 'none']} mb={3}>\n                <Details>\n                  {({open}) => (\n                    <>\n                      <Text as=\"summary\" fontWeight=\"bold\">\n                        <StyledOcticon icon={open ? ChevronDown : ChevronRight} mr={2} />\n                        Table of contents\n                      </Text>\n                      <Box pt={1}>\n                        <TableOfContents items={pageContext.tableOfContents.items} />\n                      </Box>\n                    </>\n                  )}\n                </Details>\n              </Box>\n            ) : null}\n            {children}\n            <PageFooter\n              editUrl={pageContext.editUrl}\n              contributors={pageContext.contributors.concat(additionalContributors.map(login => ({login})))}\n            />\n          </Box>\n        </Grid>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default Layout\n"],"sourceRoot":""}