{"version":3,"sources":["webpack:///./node_modules/@primer/gatsby-theme-doctocat/src/components/table-of-contents.js","webpack:///./src/@primer/gatsby-theme-doctocat/components/layout.js","webpack:///./content/Pagination.md"],"names":["listStyle","TableOfContents","items","depth","as","m","p","map","item","key","url","pl","display","py","href","color","title","defaultProps","zIndex","alignItems","alignSelf","gridArea","overflow","Layout","children","pageContext","frontmatter","description","status","source","additionalContributors","flexDirection","minHeight","flex","id","maxWidth","gridTemplateColumns","gridTemplateAreas","gridColumnGap","gridRowGap","mx","borderWidth","borderBottomWidth","borderRadius","pb","tableOfContents","position","top","HEADER_HEIGHT","maxHeight","fontWeight","mb","open","icon","ChevronDown","ChevronRight","mr","pt","editUrl","contributors","concat","login","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---content-pagination-md-b0f3183558b84cf59365.js","sourcesContent":["import {Box, Link} from '@primer/components'\nimport React from 'react'\n\nfunction TableOfContents({items, depth}) {\n  return (\n    <Box as=\"ul\" m={0} p={0} css={{listStyle: 'none'}}>\n      {items.map(item => (\n        <Box as=\"li\" key={item.url} pl={depth > 0 ? 3 : 0}>\n          <Link display=\"inline-block\" py={1} href={item.url} color=\"gray.6\">\n            {item.title}\n          </Link>\n          {item.items ? (\n            <TableOfContents items={item.items} depth={depth + 1} />\n          ) : null}\n        </Box>\n      ))}\n    </Box>\n  )\n}\n\nTableOfContents.defaultProps = {\n  depth: 0,\n}\n\nexport default TableOfContents\n","import {BorderBox, Box, Flex, Grid, Heading, Position, Text, Details, StyledOcticon} from '@primer/components'\nimport {ChevronDown, ChevronRight} from '@primer/octicons-react'\nimport React from 'react'\nimport Head from '@primer/gatsby-theme-doctocat/src/components/head'\nimport Header, {HEADER_HEIGHT} from '@primer/gatsby-theme-doctocat/src/components/header'\nimport PageFooter from '@primer/gatsby-theme-doctocat/src/components/page-footer'\nimport Sidebar from '@primer/gatsby-theme-doctocat/src/components/sidebar'\nimport SourceLink from '@primer/gatsby-theme-doctocat/src/components/source-link'\nimport StatusLabel from '@primer/gatsby-theme-doctocat/src/components/status-label'\nimport TableOfContents from '@primer/gatsby-theme-doctocat/src/components/table-of-contents'\n\nfunction Layout({children, pageContext}) {\n  const {title, description, status, source, additionalContributors = []} = pageContext.frontmatter\n\n  return (\n    <Flex flexDirection=\"column\" minHeight=\"100vh\">\n      <Head title={title} description={description} />\n      <Header />\n      <Flex flex=\"1 1 auto\" flexDirection=\"row\" css={{zIndex: 0}}>\n        <Box display={['none', null, null, 'block']}>\n          <Sidebar />\n        </Box>\n        <Grid\n          id=\"skip-nav\"\n          maxWidth=\"100%\"\n          gridTemplateColumns={['100%', null, 'minmax(0, 65ch) 220px']}\n          gridTemplateAreas={['\"heading\" \"content\"', null, '\"heading .\" \"content table-of-contents\"']}\n          gridColumnGap={[null, null, 6, 7]}\n          gridRowGap={3}\n          mx=\"auto\"\n          p={[5, 6, null, 7]}\n          css={{alignItems: 'start', alignSelf: 'start'}}\n        >\n          <BorderBox css={{gridArea: 'heading'}} borderWidth={0} borderBottomWidth={1} borderRadius={0} pb={2}>\n            <Heading>{title}</Heading>\n          </BorderBox>\n          {pageContext.tableOfContents.items ? (\n            <Position\n              display={['none', null, 'block']}\n              css={{gridArea: 'table-of-contents', overflow: 'auto'}}\n              position=\"sticky\"\n              top={HEADER_HEIGHT + 24}\n              maxHeight={`calc(100vh - ${HEADER_HEIGHT}px - 24px)`}\n            >\n              <Text display=\"inline-block\" fontWeight=\"bold\" mb={1}>\n                Table of contents\n              </Text>\n              <TableOfContents items={pageContext.tableOfContents.items} />\n            </Position>\n          ) : null}\n          <Box css={{gridArea: 'content'}}>\n            {status || source ? (\n              <Flex mb={3} alignItems=\"center\">\n                {status ? <StatusLabel status={status} /> : null}\n                <Box mx=\"auto\" />\n                {source ? <SourceLink href={source} /> : null}\n              </Flex>\n            ) : null}\n            {pageContext.tableOfContents.items ? (\n              <Box display={['block', null, 'none']} mb={3}>\n                <Details>\n                  {({open}) => (\n                    <>\n                      <Text as=\"summary\" fontWeight=\"bold\">\n                        <StyledOcticon icon={open ? ChevronDown : ChevronRight} mr={2} />\n                        Table of contents\n                      </Text>\n                      <Box pt={1}>\n                        <TableOfContents items={pageContext.tableOfContents.items} />\n                      </Box>\n                    </>\n                  )}\n                </Details>\n              </Box>\n            ) : null}\n            {children}\n            <PageFooter\n              editUrl={pageContext.editUrl}\n              contributors={pageContext.contributors.concat(additionalContributors.map(login => ({login})))}\n            />\n          </Box>\n        </Grid>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default Layout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/components/components/docs/node_modules/@primer/gatsby-theme-doctocat/src/components/layout.js\";\nimport State from '../components/State';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Use the pagination component to create a connected set of links that lead to related pages (for example, previous, next, or page numbers).`}</p>\n    <h2>{`Basic example`}</h2>\n    <p>{`The pagination component only requires two properties to render: `}<inlineCode parentName=\"p\">{`pageCount`}</inlineCode>{`, which is the total number of pages, and `}<inlineCode parentName=\"p\">{`currentPage`}</inlineCode>{`, which is the currently selected page number (which should be managed by the consuming application).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Pagination\n  pageCount={15}\n  currentPage={2}\n  onPageChange={e => e.preventDefault()}\n/>\n`}</code></pre>\n    <p>{`However, to handle state changes when the user clicks a page, you also need to pass `}<inlineCode parentName=\"p\">{`onPageChange`}</inlineCode>{`, which is a function that takes a click event and page number as an argument:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type PageChangeCallback = (evt: React.MouseEvent, page: number) => void\n`}</code></pre>\n    <p>{`By default, clicking a link in the pagination component will cause the browser to navigate to the URL specified by the page. To cancel navigation and handle state management on your own, you should call `}<inlineCode parentName=\"p\">{`preventDefault`}</inlineCode>{` on the event, as in this example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<State default={1}>\n  {([page, setPage]) => {\n    const totalPages = 15\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setPage(page)\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>Current page: {page} / {totalPages}</Box>\n        <Pagination\n          pageCount={totalPages}\n          currentPage={page}\n          onPageChange={onPageChange}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n`}</code></pre>\n    <h2>{`Customizing link URLs`}</h2>\n    <p>{`To customize the URL generated for each link, you can pass a function to the `}<inlineCode parentName=\"p\">{`hrefBuilder`}</inlineCode>{` property. The function should take a page number as an argument and return a URL to use for the link.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type HrefBuilder = (page: number) => string\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<State default={'(nothing clicked yet)'}>\n  {([lastUrl, setLastUrl]) => {\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setLastUrl(evt.target.href)\n    }\n    const hrefBuilder = (page) => {\n      return \\`https://example.com/pages/\\${page}\\`\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>The last URL clicked was: {lastUrl}</Box>\n        <Pagination\n          pageCount={15}\n          currentPage={2}\n          onPageChange={onPageChange}\n          hrefBuilder={hrefBuilder}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n`}</code></pre>\n    <h2>{`Customizing which pages are shown`}</h2>\n    <p>{`Two props control how many links are displayed in the pagination container at any given time. `}<inlineCode parentName=\"p\">{`marginPageCount`}</inlineCode>{` controls how many pages are guaranteed to be displayed on the left and right of the component; `}<inlineCode parentName=\"p\">{`surroundingPageCount`}</inlineCode>{` controls how many pages will be displayed to the left and right of the current page.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Pagination\n  pageCount={20}\n  currentPage={10}\n  marginPageCount={1}\n  surroundingPageCount={2}\n  onPageChange={e => e.preventDefault()}\n/>\n`}</code></pre>\n    <p>{`The algorithm tries to minimize the amount the component shrinks and grows as the user changes pages; for this reason, if any of the pages in the margin (controlled via `}<inlineCode parentName=\"p\">{`marginPageCount`}</inlineCode>{`) intersect with pages in the center (controlled by `}<inlineCode parentName=\"p\">{`surroundingPageCount`}</inlineCode>{`), the center section will be shifted away from the margin. Consider the following examples, where pages one through six are shown when any of the first four pages are selected. Only when the fifth page is selected and there is a gap between the margin pages and the center pages does a break element appear.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Box>\n  {[1, 2, 3, 4, 5].map(page => (\n    <Pagination\n      pageCount={20}\n      currentPage={page}\n      marginPageCount={1}\n      surroundingPageCount={2}\n      onPageChange={e => e.preventDefault()}\n    />\n  ))}\n</Box>\n`}</code></pre>\n    <h3>{`Previous/next pagination`}</h3>\n    <p>{`To hide all the page numbers and create a simple pagination container with just the Previous and Next buttons, set `}<inlineCode parentName=\"p\">{`showPages`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<State default={1}>\n  {([page, setPage]) => {\n    const totalPages = 10\n    const onPageChange = (evt, page) => {\n      evt.preventDefault()\n      setPage(page)\n    }\n\n    return (\n      <BorderBox p={2}>\n        <Box>Current page: {page} / {totalPages}</Box>\n        <Pagination\n          pageCount={totalPages}\n          currentPage={page}\n          onPageChange={onPageChange}\n          showPages={false}\n        />\n      </BorderBox>\n    )\n  }}\n</State>\n`}</code></pre>\n    <h2>{`System props`}</h2>\n    <p>{`Pagination components get `}<inlineCode parentName=\"p\">{`COMMON`}</inlineCode>{` system props. Read our `}<a parentName=\"p\" {...{\n        \"href\": \"/components/staging/emily/testing2/system-props\"\n      }}>{`System Props`}</a>{` doc page for a full list of available props.`}</p>\n    <h2>{`Component props`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Default`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`currentPage`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` The currently selected page.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`hrefBuilder`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><inlineCode parentName=\"td\">{`#\\${page}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`A function to generate links based on page number.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`marginPageCount`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`How many pages to always show at the left and right of the component.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`onPageChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`no-op`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Called with event and page number when a page is clicked.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`pageCount`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><strong parentName=\"td\">{`Required.`}</strong>{` The total number of pages.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`showPages`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><inlineCode parentName=\"td\">{`true`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Whether or not to show the individual page links.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`surroundingPageCount`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`How many pages to display on each side of the currently selected page.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`Theming`}</h2>\n    <p>{`The following snippet shows the properties in the theme that control the styling of the pagination component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  // ... rest of theme ...\n  pagination: {\n    fontSize,\n    fontWeight,\n    borderRadius,\n    colors: {\n      normal: {\n        fg,\n        bg,\n        border\n      },\n      disabled: {\n        fg,\n        bg,\n        border\n      },\n      hover: {\n        fg,\n        bg,\n        border\n      },\n      selected: {\n        fg,\n        bg,\n        border\n      }\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}